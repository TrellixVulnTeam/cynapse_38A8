2171abde9010c572e632113a6ad00c16
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const parse_links_service_1 = require("./parse-links.service");
describe('Parse links service test', () => {
    describe('Parse Links Service Test', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                providers: [parse_links_service_1.ParseLinks],
            });
        });
        it('should throw an error when passed an empty string', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('');
            }).toThrow(new Error('input must not be of zero length'));
        }));
        it('should throw an error when passed without comma', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('test');
            }).toThrow(new Error('section could not be split on ";"'));
        }));
        it('should throw an error when passed without semicolon', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            expect(function () {
                service.parse('test,test2');
            }).toThrow(new Error('section could not be split on ";"'));
        }));
        it('should return links when headers are passed', testing_1.inject([parse_links_service_1.ParseLinks], (service) => {
            const links = { last: 0, first: 0 };
            expect(service.parse(' </api/audits?page=0&size=20>; rel="last",</api/audits?page=0&size=20>; rel="first"')).toEqual(links);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2NvcmUvdXRpbC9wYXJzZS1saW5rcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBd0Q7QUFFeEQsK0RBQW1EO0FBRW5ELFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUN4QyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsU0FBUyxFQUFFLENBQUMsZ0NBQVUsQ0FBQzthQUN4QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxnQkFBTSxDQUFDLENBQUMsZ0NBQVUsQ0FBQyxFQUFFLENBQUMsT0FBbUIsRUFBRSxFQUFFO1lBQ25HLE1BQU0sQ0FBQztnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxnQkFBTSxDQUFDLENBQUMsZ0NBQVUsQ0FBQyxFQUFFLENBQUMsT0FBbUIsRUFBRSxFQUFFO1lBQ2pHLE1BQU0sQ0FBQztnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxnQkFBTSxDQUFDLENBQUMsZ0NBQVUsQ0FBQyxFQUFFLENBQUMsT0FBbUIsRUFBRSxFQUFFO1lBQ3JHLE1BQU0sQ0FBQztnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxnQkFBTSxDQUFDLENBQUMsZ0NBQVUsQ0FBQyxFQUFFLENBQUMsT0FBbUIsRUFBRSxFQUFFO1lBQzdGLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMscUZBQXFGLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5SCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9rYXJ0aGlrL2N5bmFwc2VUZWNoL3NyYy9tYWluL3dlYmFwcC9hcHAvY29yZS91dGlsL3BhcnNlLWxpbmtzLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBQYXJzZUxpbmtzIH0gZnJvbSAnLi9wYXJzZS1saW5rcy5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ1BhcnNlIGxpbmtzIHNlcnZpY2UgdGVzdCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1BhcnNlIExpbmtzIFNlcnZpY2UgVGVzdCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIHByb3ZpZGVyczogW1BhcnNlTGlua3NdLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gcGFzc2VkIGFuIGVtcHR5IHN0cmluZycsIGluamVjdChbUGFyc2VMaW5rc10sIChzZXJ2aWNlOiBQYXJzZUxpbmtzKSA9PiB7XG4gICAgICBleHBlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXJ2aWNlLnBhcnNlKCcnKTtcbiAgICAgIH0pLnRvVGhyb3cobmV3IEVycm9yKCdpbnB1dCBtdXN0IG5vdCBiZSBvZiB6ZXJvIGxlbmd0aCcpKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gcGFzc2VkIHdpdGhvdXQgY29tbWEnLCBpbmplY3QoW1BhcnNlTGlua3NdLCAoc2VydmljZTogUGFyc2VMaW5rcykgPT4ge1xuICAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VydmljZS5wYXJzZSgndGVzdCcpO1xuICAgICAgfSkudG9UaHJvdyhuZXcgRXJyb3IoJ3NlY3Rpb24gY291bGQgbm90IGJlIHNwbGl0IG9uIFwiO1wiJykpO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBwYXNzZWQgd2l0aG91dCBzZW1pY29sb24nLCBpbmplY3QoW1BhcnNlTGlua3NdLCAoc2VydmljZTogUGFyc2VMaW5rcykgPT4ge1xuICAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VydmljZS5wYXJzZSgndGVzdCx0ZXN0MicpO1xuICAgICAgfSkudG9UaHJvdyhuZXcgRXJyb3IoJ3NlY3Rpb24gY291bGQgbm90IGJlIHNwbGl0IG9uIFwiO1wiJykpO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGxpbmtzIHdoZW4gaGVhZGVycyBhcmUgcGFzc2VkJywgaW5qZWN0KFtQYXJzZUxpbmtzXSwgKHNlcnZpY2U6IFBhcnNlTGlua3MpID0+IHtcbiAgICAgIGNvbnN0IGxpbmtzID0geyBsYXN0OiAwLCBmaXJzdDogMCB9O1xuICAgICAgZXhwZWN0KHNlcnZpY2UucGFyc2UoJyA8L2FwaS9hdWRpdHM/cGFnZT0wJnNpemU9MjA+OyByZWw9XCJsYXN0XCIsPC9hcGkvYXVkaXRzP3BhZ2U9MCZzaXplPTIwPjsgcmVsPVwiZmlyc3RcIicpKS50b0VxdWFsKGxpbmtzKTtcbiAgICB9KSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=