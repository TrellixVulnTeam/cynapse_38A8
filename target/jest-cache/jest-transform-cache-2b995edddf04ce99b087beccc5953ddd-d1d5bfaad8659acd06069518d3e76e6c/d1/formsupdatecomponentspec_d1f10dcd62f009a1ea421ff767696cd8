6c122f3557a3c64f95024d902af8fea6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('@angular/router');
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const forms_service_1 = require("../service/forms.service");
const forms_model_1 = require("../forms.model");
const user_service_1 = require("app/entities/user/user.service");
const forms_update_component_1 = require("./forms-update.component");
describe('Component Tests', () => {
    describe('Forms Management Update Component', () => {
        let comp;
        let fixture;
        let activatedRoute;
        let formsService;
        let userService;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [forms_update_component_1.FormsUpdateComponent],
                providers: [forms_1.FormBuilder, router_1.ActivatedRoute],
            })
                .overrideTemplate(forms_update_component_1.FormsUpdateComponent, '')
                .compileComponents();
            fixture = testing_1.TestBed.createComponent(forms_update_component_1.FormsUpdateComponent);
            activatedRoute = testing_1.TestBed.inject(router_1.ActivatedRoute);
            formsService = testing_1.TestBed.inject(forms_service_1.FormsService);
            userService = testing_1.TestBed.inject(user_service_1.UserService);
            comp = fixture.componentInstance;
        });
        describe('ngOnInit', () => {
            it('Should call User query and add missing value', () => {
                const forms = { id: 456 };
                const user = { id: 73914 };
                forms.user = user;
                const userCollection = [{ id: 84933 }];
                spyOn(userService, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: userCollection })));
                const additionalUsers = [user];
                const expectedCollection = [...additionalUsers, ...userCollection];
                spyOn(userService, 'addUserToCollectionIfMissing').and.returnValue(expectedCollection);
                activatedRoute.data = rxjs_1.of({ forms });
                comp.ngOnInit();
                expect(userService.query).toHaveBeenCalled();
                expect(userService.addUserToCollectionIfMissing).toHaveBeenCalledWith(userCollection, ...additionalUsers);
                expect(comp.usersSharedCollection).toEqual(expectedCollection);
            });
            it('Should update editForm', () => {
                const forms = { id: 456 };
                const user = { id: 15812 };
                forms.user = user;
                activatedRoute.data = rxjs_1.of({ forms });
                comp.ngOnInit();
                expect(comp.editForm.value).toEqual(expect.objectContaining(forms));
                expect(comp.usersSharedCollection).toContain(user);
            });
        });
        describe('save', () => {
            it('Should call update service on save for existing entity', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const forms = { id: 123 };
                spyOn(formsService, 'update').and.returnValue(saveSubject);
                spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ forms });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.next(new http_1.HttpResponse({ body: forms }));
                saveSubject.complete();
                // THEN
                expect(comp.previousState).toHaveBeenCalled();
                expect(formsService.update).toHaveBeenCalledWith(forms);
                expect(comp.isSaving).toEqual(false);
            });
            it('Should call create service on save for new entity', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const forms = new forms_model_1.Forms();
                spyOn(formsService, 'create').and.returnValue(saveSubject);
                spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ forms });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.next(new http_1.HttpResponse({ body: forms }));
                saveSubject.complete();
                // THEN
                expect(formsService.create).toHaveBeenCalledWith(forms);
                expect(comp.isSaving).toEqual(false);
                expect(comp.previousState).toHaveBeenCalled();
            });
            it('Should set isSaving to false on error', () => {
                // GIVEN
                const saveSubject = new rxjs_1.Subject();
                const forms = { id: 123 };
                spyOn(formsService, 'update').and.returnValue(saveSubject);
                spyOn(comp, 'previousState');
                activatedRoute.data = rxjs_1.of({ forms });
                comp.ngOnInit();
                // WHEN
                comp.save();
                expect(comp.isSaving).toEqual(true);
                saveSubject.error('This is an error!');
                // THEN
                expect(formsService.update).toHaveBeenCalledWith(forms);
                expect(comp.isSaving).toEqual(false);
                expect(comp.previousState).not.toHaveBeenCalled();
            });
        });
        describe('Tracking relationships identifiers', () => {
            describe('trackUserById', () => {
                it('Should return tracked User primary key', () => {
                    const entity = { id: 123 };
                    const trackResult = comp.trackUserById(0, entity);
                    expect(trackResult).toEqual(entity.id);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,