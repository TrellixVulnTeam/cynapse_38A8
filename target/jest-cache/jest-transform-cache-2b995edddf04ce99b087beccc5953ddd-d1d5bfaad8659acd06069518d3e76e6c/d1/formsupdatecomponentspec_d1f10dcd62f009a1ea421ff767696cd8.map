{"file":"/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/update/forms-update.component.spec.ts","mappings":"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","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/update/forms-update.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of, Subject } from 'rxjs';\n\nimport { FormsService } from '../service/forms.service';\nimport { IForms, Forms } from '../forms.model';\n\nimport { IUser } from 'app/entities/user/user.model';\nimport { UserService } from 'app/entities/user/user.service';\n\nimport { FormsUpdateComponent } from './forms-update.component';\n\ndescribe('Component Tests', () => {\n  describe('Forms Management Update Component', () => {\n    let comp: FormsUpdateComponent;\n    let fixture: ComponentFixture<FormsUpdateComponent>;\n    let activatedRoute: ActivatedRoute;\n    let formsService: FormsService;\n    let userService: UserService;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        declarations: [FormsUpdateComponent],\n        providers: [FormBuilder, ActivatedRoute],\n      })\n        .overrideTemplate(FormsUpdateComponent, '')\n        .compileComponents();\n\n      fixture = TestBed.createComponent(FormsUpdateComponent);\n      activatedRoute = TestBed.inject(ActivatedRoute);\n      formsService = TestBed.inject(FormsService);\n      userService = TestBed.inject(UserService);\n\n      comp = fixture.componentInstance;\n    });\n\n    describe('ngOnInit', () => {\n      it('Should call User query and add missing value', () => {\n        const forms: IForms = { id: 456 };\n        const user: IUser = { id: 73914 };\n        forms.user = user;\n\n        const userCollection: IUser[] = [{ id: 84933 }];\n        spyOn(userService, 'query').and.returnValue(of(new HttpResponse({ body: userCollection })));\n        const additionalUsers = [user];\n        const expectedCollection: IUser[] = [...additionalUsers, ...userCollection];\n        spyOn(userService, 'addUserToCollectionIfMissing').and.returnValue(expectedCollection);\n\n        activatedRoute.data = of({ forms });\n        comp.ngOnInit();\n\n        expect(userService.query).toHaveBeenCalled();\n        expect(userService.addUserToCollectionIfMissing).toHaveBeenCalledWith(userCollection, ...additionalUsers);\n        expect(comp.usersSharedCollection).toEqual(expectedCollection);\n      });\n\n      it('Should update editForm', () => {\n        const forms: IForms = { id: 456 };\n        const user: IUser = { id: 15812 };\n        forms.user = user;\n\n        activatedRoute.data = of({ forms });\n        comp.ngOnInit();\n\n        expect(comp.editForm.value).toEqual(expect.objectContaining(forms));\n        expect(comp.usersSharedCollection).toContain(user);\n      });\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing entity', () => {\n        // GIVEN\n        const saveSubject = new Subject();\n        const forms = { id: 123 };\n        spyOn(formsService, 'update').and.returnValue(saveSubject);\n        spyOn(comp, 'previousState');\n        activatedRoute.data = of({ forms });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: forms }));\n        saveSubject.complete();\n\n        // THEN\n        expect(comp.previousState).toHaveBeenCalled();\n        expect(formsService.update).toHaveBeenCalledWith(forms);\n        expect(comp.isSaving).toEqual(false);\n      });\n\n      it('Should call create service on save for new entity', () => {\n        // GIVEN\n        const saveSubject = new Subject();\n        const forms = new Forms();\n        spyOn(formsService, 'create').and.returnValue(saveSubject);\n        spyOn(comp, 'previousState');\n        activatedRoute.data = of({ forms });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.next(new HttpResponse({ body: forms }));\n        saveSubject.complete();\n\n        // THEN\n        expect(formsService.create).toHaveBeenCalledWith(forms);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).toHaveBeenCalled();\n      });\n\n      it('Should set isSaving to false on error', () => {\n        // GIVEN\n        const saveSubject = new Subject();\n        const forms = { id: 123 };\n        spyOn(formsService, 'update').and.returnValue(saveSubject);\n        spyOn(comp, 'previousState');\n        activatedRoute.data = of({ forms });\n        comp.ngOnInit();\n\n        // WHEN\n        comp.save();\n        expect(comp.isSaving).toEqual(true);\n        saveSubject.error('This is an error!');\n\n        // THEN\n        expect(formsService.update).toHaveBeenCalledWith(forms);\n        expect(comp.isSaving).toEqual(false);\n        expect(comp.previousState).not.toHaveBeenCalled();\n      });\n    });\n\n    describe('Tracking relationships identifiers', () => {\n      describe('trackUserById', () => {\n        it('Should return tracked User primary key', () => {\n          const entity = { id: 123 };\n          const trackResult = comp.trackUserById(0, entity);\n          expect(trackResult).toEqual(entity.id);\n        });\n      });\n    });\n  });\n});\n"],"version":3}