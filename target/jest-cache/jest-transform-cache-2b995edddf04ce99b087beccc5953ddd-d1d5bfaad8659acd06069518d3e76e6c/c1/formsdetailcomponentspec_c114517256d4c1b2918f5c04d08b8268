31af3e88b78fd5fd775ceec6edb0c090
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const data_util_service_1 = require("app/core/util/data-util.service");
const forms_detail_component_1 = require("./forms-detail.component");
describe('Component Tests', () => {
    describe('Forms Management Detail Component', () => {
        let comp;
        let fixture;
        let dataUtils;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [forms_detail_component_1.FormsDetailComponent],
                providers: [
                    {
                        provide: router_1.ActivatedRoute,
                        useValue: { data: rxjs_1.of({ forms: { id: 123 } }) },
                    },
                ],
            })
                .overrideTemplate(forms_detail_component_1.FormsDetailComponent, '')
                .compileComponents();
            fixture = testing_1.TestBed.createComponent(forms_detail_component_1.FormsDetailComponent);
            comp = fixture.componentInstance;
            dataUtils = testing_1.TestBed.inject(data_util_service_1.DataUtils);
        });
        describe('OnInit', () => {
            it('Should load forms on init', () => {
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(comp.forms).toEqual(jasmine.objectContaining({ id: 123 }));
            });
        });
        describe('byteSize', () => {
            it('Should call byteSize from DataUtils', () => {
                // GIVEN
                spyOn(dataUtils, 'byteSize');
                const fakeBase64 = 'fake base64';
                // WHEN
                comp.byteSize(fakeBase64);
                // THEN
                expect(dataUtils.byteSize).toBeCalledWith(fakeBase64);
            });
        });
        describe('openFile', () => {
            it('Should call openFile from DataUtils', () => {
                // GIVEN
                spyOn(dataUtils, 'openFile');
                const fakeContentType = 'fake content type';
                const fakeBase64 = 'fake base64';
                // WHEN
                comp.openFile(fakeBase64, fakeContentType);
                // THEN
                expect(dataUtils.openFile).toBeCalledWith(fakeBase64, fakeContentType);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2VudGl0aWVzL2Zvcm1zL2RldGFpbC9mb3Jtcy1kZXRhaWwuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0U7QUFDbEUsNENBQWlEO0FBQ2pELCtCQUEwQjtBQUUxQix1RUFBNEQ7QUFFNUQscUVBQWdFO0FBRWhFLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsUUFBUSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxJQUFJLElBQTBCLENBQUM7UUFDL0IsSUFBSSxPQUErQyxDQUFDO1FBQ3BELElBQUksU0FBb0IsQ0FBQztRQUV6QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsWUFBWSxFQUFFLENBQUMsNkNBQW9CLENBQUM7Z0JBQ3BDLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsdUJBQWM7d0JBQ3ZCLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO3FCQUMvQztpQkFDRjthQUNGLENBQUM7aUJBQ0MsZ0JBQWdCLENBQUMsNkNBQW9CLEVBQUUsRUFBRSxDQUFDO2lCQUMxQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyw2Q0FBb0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7WUFDakMsU0FBUyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLDZCQUFTLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ3RCLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7Z0JBQ25DLE9BQU87Z0JBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUVoQixPQUFPO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7Z0JBQzdDLFFBQVE7Z0JBQ1IsS0FBSyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDO2dCQUVqQyxPQUFPO2dCQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBRTFCLE9BQU87Z0JBQ1AsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7Z0JBQzdDLFFBQVE7Z0JBQ1IsS0FBSyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUM7Z0JBQzVDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQztnQkFFakMsT0FBTztnQkFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFFM0MsT0FBTztnQkFDUCxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDekUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2VudGl0aWVzL2Zvcm1zL2RldGFpbC9mb3Jtcy1kZXRhaWwuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBEYXRhVXRpbHMgfSBmcm9tICdhcHAvY29yZS91dGlsL2RhdGEtdXRpbC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRm9ybXNEZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL2Zvcm1zLWRldGFpbC5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnRm9ybXMgTWFuYWdlbWVudCBEZXRhaWwgQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBjb21wOiBGb3Jtc0RldGFpbENvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxGb3Jtc0RldGFpbENvbXBvbmVudD47XG4gICAgbGV0IGRhdGFVdGlsczogRGF0YVV0aWxzO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBkZWNsYXJhdGlvbnM6IFtGb3Jtc0RldGFpbENvbXBvbmVudF0sXG4gICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgICAgdXNlVmFsdWU6IHsgZGF0YTogb2YoeyBmb3JtczogeyBpZDogMTIzIH0gfSkgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICAgICAgLm92ZXJyaWRlVGVtcGxhdGUoRm9ybXNEZXRhaWxDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChGb3Jtc0RldGFpbENvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIGRhdGFVdGlscyA9IFRlc3RCZWQuaW5qZWN0KERhdGFVdGlscyk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnT25Jbml0JywgKCkgPT4ge1xuICAgICAgaXQoJ1Nob3VsZCBsb2FkIGZvcm1zIG9uIGluaXQnLCAoKSA9PiB7XG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgY29tcC5uZ09uSW5pdCgpO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KGNvbXAuZm9ybXMpLnRvRXF1YWwoamFzbWluZS5vYmplY3RDb250YWluaW5nKHsgaWQ6IDEyMyB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdieXRlU2l6ZScsICgpID0+IHtcbiAgICAgIGl0KCdTaG91bGQgY2FsbCBieXRlU2l6ZSBmcm9tIERhdGFVdGlscycsICgpID0+IHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgc3B5T24oZGF0YVV0aWxzLCAnYnl0ZVNpemUnKTtcbiAgICAgICAgY29uc3QgZmFrZUJhc2U2NCA9ICdmYWtlIGJhc2U2NCc7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBjb21wLmJ5dGVTaXplKGZha2VCYXNlNjQpO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KGRhdGFVdGlscy5ieXRlU2l6ZSkudG9CZUNhbGxlZFdpdGgoZmFrZUJhc2U2NCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvcGVuRmlsZScsICgpID0+IHtcbiAgICAgIGl0KCdTaG91bGQgY2FsbCBvcGVuRmlsZSBmcm9tIERhdGFVdGlscycsICgpID0+IHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgc3B5T24oZGF0YVV0aWxzLCAnb3BlbkZpbGUnKTtcbiAgICAgICAgY29uc3QgZmFrZUNvbnRlbnRUeXBlID0gJ2Zha2UgY29udGVudCB0eXBlJztcbiAgICAgICAgY29uc3QgZmFrZUJhc2U2NCA9ICdmYWtlIGJhc2U2NCc7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBjb21wLm9wZW5GaWxlKGZha2VCYXNlNjQsIGZha2VDb250ZW50VHlwZSk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3QoZGF0YVV0aWxzLm9wZW5GaWxlKS50b0JlQ2FsbGVkV2l0aChmYWtlQmFzZTY0LCBmYWtlQ29udGVudFR5cGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=