{"file":"/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/detail/forms-detail.component.spec.ts","mappings":";;AAAA,mDAAkE;AAClE,4CAAiD;AACjD,+BAA0B;AAE1B,uEAA4D;AAE5D,qEAAgE;AAEhE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAI,IAA0B,CAAC;QAC/B,IAAI,OAA+C,CAAC;QACpD,IAAI,SAAoB,CAAC;QAEzB,UAAU,CAAC,GAAG,EAAE;YACd,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,YAAY,EAAE,CAAC,6CAAoB,CAAC;gBACpC,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,uBAAc;wBACvB,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE;qBAC/C;iBACF;aACF,CAAC;iBACC,gBAAgB,CAAC,6CAAoB,EAAE,EAAE,CAAC;iBAC1C,iBAAiB,EAAE,CAAC;YACvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,6CAAoB,CAAC,CAAC;YACxD,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,SAAS,GAAG,iBAAO,CAAC,MAAM,CAAC,6BAAS,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;YACtB,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,OAAO;gBACP,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAEhB,OAAO;gBACP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;YACxB,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;gBAC7C,QAAQ;gBACR,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAC7B,MAAM,UAAU,GAAG,aAAa,CAAC;gBAEjC,OAAO;gBACP,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAE1B,OAAO;gBACP,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;YACxB,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;gBAC7C,QAAQ;gBACR,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAC7B,MAAM,eAAe,GAAG,mBAAmB,CAAC;gBAC5C,MAAM,UAAU,GAAG,aAAa,CAAC;gBAEjC,OAAO;gBACP,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;gBAE3C,OAAO;gBACP,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/detail/forms-detail.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { DataUtils } from 'app/core/util/data-util.service';\n\nimport { FormsDetailComponent } from './forms-detail.component';\n\ndescribe('Component Tests', () => {\n  describe('Forms Management Detail Component', () => {\n    let comp: FormsDetailComponent;\n    let fixture: ComponentFixture<FormsDetailComponent>;\n    let dataUtils: DataUtils;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        declarations: [FormsDetailComponent],\n        providers: [\n          {\n            provide: ActivatedRoute,\n            useValue: { data: of({ forms: { id: 123 } }) },\n          },\n        ],\n      })\n        .overrideTemplate(FormsDetailComponent, '')\n        .compileComponents();\n      fixture = TestBed.createComponent(FormsDetailComponent);\n      comp = fixture.componentInstance;\n      dataUtils = TestBed.inject(DataUtils);\n    });\n\n    describe('OnInit', () => {\n      it('Should load forms on init', () => {\n        // WHEN\n        comp.ngOnInit();\n\n        // THEN\n        expect(comp.forms).toEqual(jasmine.objectContaining({ id: 123 }));\n      });\n    });\n\n    describe('byteSize', () => {\n      it('Should call byteSize from DataUtils', () => {\n        // GIVEN\n        spyOn(dataUtils, 'byteSize');\n        const fakeBase64 = 'fake base64';\n\n        // WHEN\n        comp.byteSize(fakeBase64);\n\n        // THEN\n        expect(dataUtils.byteSize).toBeCalledWith(fakeBase64);\n      });\n    });\n\n    describe('openFile', () => {\n      it('Should call openFile from DataUtils', () => {\n        // GIVEN\n        spyOn(dataUtils, 'openFile');\n        const fakeContentType = 'fake content type';\n        const fakeBase64 = 'fake base64';\n\n        // WHEN\n        comp.openFile(fakeBase64, fakeContentType);\n\n        // THEN\n        expect(dataUtils.openFile).toBeCalledWith(fakeBase64, fakeContentType);\n      });\n    });\n  });\n});\n"],"version":3}