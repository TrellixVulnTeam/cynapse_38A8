15b3af171396c52d836d275f5e5a5006
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const password_strength_bar_component_1 = require("./password-strength-bar.component");
describe('Component Tests', () => {
    describe('PasswordStrengthBarComponent', () => {
        let comp;
        let fixture;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [password_strength_bar_component_1.PasswordStrengthBarComponent],
            })
                .overrideTemplate(password_strength_bar_component_1.PasswordStrengthBarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_strength_bar_component_1.PasswordStrengthBarComponent);
            comp = fixture.componentInstance;
        });
        describe('PasswordStrengthBarComponents', () => {
            it('should initialize with default values', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.colors).toEqual(['#F00', '#F90', '#FF0', '#9F0', '#0F0']);
                expect(comp.getColor(0).idx).toBe(1);
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
            });
            it('should increase strength upon password value change', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.measureStrength('aa')).toBeGreaterThanOrEqual(comp.measureStrength(''));
                expect(comp.measureStrength('aa^6')).toBeGreaterThanOrEqual(comp.measureStrength('aa'));
                expect(comp.measureStrength('Aa090(**)')).toBeGreaterThanOrEqual(comp.measureStrength('aa^6'));
                expect(comp.measureStrength('Aa090(**)+-07365')).toBeGreaterThanOrEqual(comp.measureStrength('Aa090(**)'));
            });
            it('should change the color based on strength', () => {
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
                expect(comp.getColor(11).color).toBe(comp.colors[1]);
                expect(comp.getColor(22).color).toBe(comp.colors[2]);
                expect(comp.getColor(33).color).toBe(comp.colors[3]);
                expect(comp.getColor(44).color).toBe(comp.colors[4]);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2FjY291bnQvcGFzc3dvcmQvcGFzc3dvcmQtc3RyZW5ndGgtYmFyL3Bhc3N3b3JkLXN0cmVuZ3RoLWJhci5jb21wb25lbnQuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRjtBQUVoRix1RkFBaUY7QUFFakYsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQzVDLElBQUksSUFBa0MsQ0FBQztRQUN2QyxJQUFJLE9BQXVELENBQUM7UUFFNUQsVUFBVSxDQUNSLHNCQUFZLENBQUMsR0FBRyxFQUFFO1lBQ2hCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdCLFlBQVksRUFBRSxDQUFDLDhEQUE0QixDQUFDO2FBQzdDLENBQUM7aUJBQ0MsZ0JBQWdCLENBQUMsOERBQTRCLEVBQUUsRUFBRSxDQUFDO2lCQUNsRCxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLDhEQUE0QixDQUFDLENBQUM7WUFDaEUsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7WUFDN0MsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtnQkFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7Z0JBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDcEYsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3hGLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMvRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzdHLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtnQkFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9rYXJ0aGlrL2N5bmFwc2VUZWNoL3NyYy9tYWluL3dlYmFwcC9hcHAvYWNjb3VudC9wYXNzd29yZC9wYXNzd29yZC1zdHJlbmd0aC1iYXIvcGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQgfSBmcm9tICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLWJhci5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudCcsICgpID0+IHtcbiAgICBsZXQgY29tcDogUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50PjtcblxuICAgIGJlZm9yZUVhY2goXG4gICAgICB3YWl0Rm9yQXN5bmMoKCkgPT4ge1xuICAgICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICAgIGRlY2xhcmF0aW9uczogW1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnRdLFxuICAgICAgICB9KVxuICAgICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQsICcnKVxuICAgICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50cycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoY29tcC5jb2xvcnMpLnRvRXF1YWwoWycjRjAwJywgJyNGOTAnLCAnI0ZGMCcsICcjOUYwJywgJyMwRjAnXSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmlkeCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMCkuY29sb3IpLnRvQmUoY29tcC5jb2xvcnNbMF0pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaW5jcmVhc2Ugc3RyZW5ndGggdXBvbiBwYXNzd29yZCB2YWx1ZSBjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWEnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnJykpO1xuICAgICAgICBleHBlY3QoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhXjYnKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWEnKSk7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnQWEwOTAoKiopJykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ2FhXjYnKSk7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnQWEwOTAoKiopKy0wNzM2NScpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdBYTA5MCgqKiknKSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdGhlIGNvbG9yIGJhc2VkIG9uIHN0cmVuZ3RoJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigwKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1swXSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDExKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1sxXSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDIyKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1syXSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDMzKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1szXSk7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDQ0KS5jb2xvcikudG9CZShjb21wLmNvbG9yc1s0XSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==