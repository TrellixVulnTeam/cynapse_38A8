19a6fbf3e7c07654fffd0b7289aa7ca9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
jest.mock('app/core/auth/account.service');
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const has_any_authority_directive_1 = require("./has-any-authority.directive");
let TestHasAnyAuthorityDirectiveComponent = class TestHasAnyAuthorityDirectiveComponent {
};
tslib_1.__decorate([
    core_1.ViewChild('content', { static: false }),
    tslib_1.__metadata("design:type", core_1.ElementRef)
], TestHasAnyAuthorityDirectiveComponent.prototype, "content", void 0);
TestHasAnyAuthorityDirectiveComponent = tslib_1.__decorate([
    core_1.Component({
        template: ` <div *jhiHasAnyAuthority="'ROLE_ADMIN'" #content></div> `,
    })
], TestHasAnyAuthorityDirectiveComponent);
describe('HasAnyAuthorityDirective tests', () => {
    let mockAccountService;
    const authenticationState = new rxjs_1.Subject();
    beforeEach(testing_1.waitForAsync(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [has_any_authority_directive_1.HasAnyAuthorityDirective, TestHasAnyAuthorityDirectiveComponent],
            providers: [account_service_1.AccountService],
        });
    }));
    beforeEach(() => {
        mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
        mockAccountService.getAuthenticationState = jest.fn(() => authenticationState.asObservable());
    });
    describe('set jhiHasAnyAuthority', () => {
        it('should show restricted content to user if user has required role', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
        });
        it('should not show restricted content to user if user has not required role', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => false);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeUndefined();
        });
    });
    describe('change authorities', () => {
        it('should show or not show restricted content correctly if user authorities are changing', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const comp = fixture.componentInstance;
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => false);
            // WHEN
            authenticationState.next();
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeUndefined();
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            // WHEN
            authenticationState.next();
            fixture.detectChanges();
            // THEN
            expect(comp.content).toBeDefined();
        });
    });
    describe('ngOnDestroy', () => {
        it('should destroy authentication state subscription on component destroy', () => {
            // GIVEN
            mockAccountService.hasAnyAuthority = jest.fn(() => true);
            const fixture = testing_1.TestBed.createComponent(TestHasAnyAuthorityDirectiveComponent);
            const div = fixture.debugElement.queryAllNodes(platform_browser_1.By.directive(has_any_authority_directive_1.HasAnyAuthorityDirective))[0];
            const hasAnyAuthorityDirective = div.injector.get(has_any_authority_directive_1.HasAnyAuthorityDirective);
            // WHEN
            fixture.detectChanges();
            // THEN
            expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();
            // WHEN
            jest.clearAllMocks();
            authenticationState.next();
            // THEN
            expect(mockAccountService.hasAnyAuthority).toHaveBeenCalled();
            // WHEN
            jest.clearAllMocks();
            hasAnyAuthorityDirective.ngOnDestroy();
            authenticationState.next();
            // THEN
            expect(mockAccountService.hasAnyAuthority).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL3NoYXJlZC9hdXRoL2hhcy1hbnktYXV0aG9yaXR5LmRpcmVjdGl2ZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUUzQyx3Q0FBaUU7QUFDakUsbURBQThEO0FBQzlELGdFQUErQztBQUMvQywrQkFBK0I7QUFFL0IsbUVBQStEO0FBRy9ELCtFQUF5RTtBQUt6RSxJQUFNLHFDQUFxQyxHQUEzQyxNQUFNLHFDQUFxQztDQUcxQyxDQUFBO0FBREM7SUFEQyxnQkFBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztzQ0FDOUIsaUJBQVU7c0VBQUM7QUFGakIscUNBQXFDO0lBSDFDLGdCQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkRBQTJEO0tBQ3RFLENBQUM7R0FDSSxxQ0FBcUMsQ0FHMUM7QUFFRCxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzlDLElBQUksa0JBQWtDLENBQUM7SUFDdkMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQU8sRUFBa0IsQ0FBQztJQUUxRCxVQUFVLENBQ1Isc0JBQVksQ0FBQyxHQUFHLEVBQUU7UUFDaEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixZQUFZLEVBQUUsQ0FBQyxzREFBd0IsRUFBRSxxQ0FBcUMsQ0FBQztZQUMvRSxTQUFTLEVBQUUsQ0FBQyxnQ0FBYyxDQUFDO1NBQzVCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2Qsa0JBQWtCLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQixDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFF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R0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekQsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMscUNBQXFDLENBQUMsQ0FBQztZQUMvRSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxxQkFBRSxDQUFDLFNBQVMsQ0FBQyxzREFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUYsTUFBTSx3QkFBd0IsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzREFBd0IsQ0FBQyxDQUFDO1lBRTVFLE9BQU87WUFDUCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7WUFFeEIsT0FBTztZQUNQLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRTlELE9BQU87WUFDUCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFM0IsT0FBTztZQUNQLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRTlELE9BQU87WUFDUCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsd0JBQXdCLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFM0IsT0FBTztZQUNQLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL3NoYXJlZC9hdXRoL2hhcy1hbnktYXV0aG9yaXR5LmRpcmVjdGl2ZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImplc3QubW9jaygnYXBwL2NvcmUvYXV0aC9hY2NvdW50LnNlcnZpY2UnKTtcblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlc3RCZWQsIHdhaXRGb3JBc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBCeSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBBY2NvdW50U2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYWNjb3VudC5zZXJ2aWNlJztcbmltcG9ydCB7IEFjY291bnQgfSBmcm9tICdhcHAvY29yZS9hdXRoL2FjY291bnQubW9kZWwnO1xuXG5pbXBvcnQgeyBIYXNBbnlBdXRob3JpdHlEaXJlY3RpdmUgfSBmcm9tICcuL2hhcy1hbnktYXV0aG9yaXR5LmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogYCA8ZGl2ICpqaGlIYXNBbnlBdXRob3JpdHk9XCInUk9MRV9BRE1JTidcIiAjY29udGVudD48L2Rpdj4gYCxcbn0pXG5jbGFzcyBUZXN0SGFzQW55QXV0aG9yaXR5RGlyZWN0aXZlQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnY29udGVudCcsIHsgc3RhdGljOiBmYWxzZSB9KVxuICBjb250ZW50PzogRWxlbWVudFJlZjtcbn1cblxuZGVzY3JpYmUoJ0hhc0FueUF1dGhvcml0eURpcmVjdGl2ZSB0ZXN0cycsICgpID0+IHtcbiAgbGV0IG1vY2tBY2NvdW50U2VydmljZTogQWNjb3VudFNlcnZpY2U7XG4gIGNvbnN0IGF1dGhlbnRpY2F0aW9uU3RhdGUgPSBuZXcgU3ViamVjdDxBY2NvdW50IHwgbnVsbD4oKTtcblxuICBiZWZvcmVFYWNoKFxuICAgIHdhaXRGb3JBc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBkZWNsYXJhdGlvbnM6IFtIYXNBbnlBdXRob3JpdHlEaXJlY3RpdmUsIFRlc3RIYXNBbnlBdXRob3JpdHlEaXJlY3RpdmVDb21wb25lbnRdLFxuICAgICAgICBwcm92aWRlcnM6IFtBY2NvdW50U2VydmljZV0sXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tBY2NvdW50U2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEFjY291bnRTZXJ2aWNlKTtcbiAgICBtb2NrQWNjb3VudFNlcnZpY2UuZ2V0QXV0aGVudGljYXRpb25TdGF0ZSA9IGplc3QuZm4oKCkgPT4gYXV0aGVudGljYXRpb25TdGF0ZS5hc09ic2VydmFibGUoKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzZXQgamhpSGFzQW55QXV0aG9yaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2hvdyByZXN0cmljdGVkIGNvbnRlbnQgdG8gdXNlciBpZiB1c2VyIGhhcyByZXF1aXJlZCByb2xlJywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBY2NvdW50U2VydmljZS5oYXNBbnlBdXRob3JpdHkgPSBqZXN0LmZuKCgpID0+IHRydWUpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFRlc3RIYXNBbnlBdXRob3JpdHlEaXJlY3RpdmVDb21wb25lbnQpO1xuICAgICAgY29uc3QgY29tcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoY29tcC5jb250ZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3Qgc2hvdyByZXN0cmljdGVkIGNvbnRlbnQgdG8gdXNlciBpZiB1c2VyIGhhcyBub3QgcmVxdWlyZWQgcm9sZScsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBtb2NrQWNjb3VudFNlcnZpY2UuaGFzQW55QXV0aG9yaXR5ID0gamVzdC5mbigoKSA9PiBmYWxzZSk7XG4gICAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoVGVzdEhhc0FueUF1dGhvcml0eURpcmVjdGl2ZUNvbXBvbmVudCk7XG4gICAgICBjb25zdCBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmNvbnRlbnQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NoYW5nZSBhdXRob3JpdGllcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNob3cgb3Igbm90IHNob3cgcmVzdHJpY3RlZCBjb250ZW50IGNvcnJlY3RseSBpZiB1c2VyIGF1dGhvcml0aWVzIGFyZSBjaGFuZ2luZycsICgpID0+IHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBtb2NrQWNjb3VudFNlcnZpY2UuaGFzQW55QXV0aG9yaXR5ID0gamVzdC5mbigoKSA9PiB0cnVlKTtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChUZXN0SGFzQW55QXV0aG9yaXR5RGlyZWN0aXZlQ29tcG9uZW50KTtcbiAgICAgIGNvbnN0IGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuY29udGVudCkudG9CZURlZmluZWQoKTtcblxuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBY2NvdW50U2VydmljZS5oYXNBbnlBdXRob3JpdHkgPSBqZXN0LmZuKCgpID0+IGZhbHNlKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgYXV0aGVudGljYXRpb25TdGF0ZS5uZXh0KCk7XG4gICAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGNvbXAuY29udGVudCkudG9CZVVuZGVmaW5lZCgpO1xuXG4gICAgICAvLyBHSVZFTlxuICAgICAgbW9ja0FjY291bnRTZXJ2aWNlLmhhc0FueUF1dGhvcml0eSA9IGplc3QuZm4oKCkgPT4gdHJ1ZSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUubmV4dCgpO1xuICAgICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChjb21wLmNvbnRlbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCduZ09uRGVzdHJveScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRlc3Ryb3kgYXV0aGVudGljYXRpb24gc3RhdGUgc3Vic2NyaXB0aW9uIG9uIGNvbXBvbmVudCBkZXN0cm95JywgKCkgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIG1vY2tBY2NvdW50U2VydmljZS5oYXNBbnlBdXRob3JpdHkgPSBqZXN0LmZuKCgpID0+IHRydWUpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFRlc3RIYXNBbnlBdXRob3JpdHlEaXJlY3RpdmVDb21wb25lbnQpO1xuICAgICAgY29uc3QgZGl2ID0gZml4dHVyZS5kZWJ1Z0VsZW1lbnQucXVlcnlBbGxOb2RlcyhCeS5kaXJlY3RpdmUoSGFzQW55QXV0aG9yaXR5RGlyZWN0aXZlKSlbMF07XG4gICAgICBjb25zdCBoYXNBbnlBdXRob3JpdHlEaXJlY3RpdmUgPSBkaXYuaW5qZWN0b3IuZ2V0KEhhc0FueUF1dGhvcml0eURpcmVjdGl2ZSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QobW9ja0FjY291bnRTZXJ2aWNlLmhhc0FueUF1dGhvcml0eSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUubmV4dCgpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QobW9ja0FjY291bnRTZXJ2aWNlLmhhc0FueUF1dGhvcml0eSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgIGhhc0FueUF1dGhvcml0eURpcmVjdGl2ZS5uZ09uRGVzdHJveSgpO1xuICAgICAgYXV0aGVudGljYXRpb25TdGF0ZS5uZXh0KCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChtb2NrQWNjb3VudFNlcnZpY2UuaGFzQW55QXV0aG9yaXR5KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9