{"file":"/home/karthik/cynapseTech/src/main/webapp/app/core/util/alert.service.spec.ts","mappings":"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","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/core/util/alert.service.spec.ts"],"sourcesContent":["import { inject, TestBed } from '@angular/core/testing';\nimport { TranslateModule, TranslateService, MissingTranslationHandler } from '@ngx-translate/core';\nimport { missingTranslationHandler } from '../../config/translation.config';\n\nimport { Alert, AlertService } from './alert.service';\n\ndescribe('Alert service test', () => {\n  describe('Alert Service Test', () => {\n    let extAlerts: Alert[];\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [\n          TranslateModule.forRoot({\n            missingTranslationHandler: {\n              provide: MissingTranslationHandler,\n              useFactory: missingTranslationHandler,\n            },\n          }),\n        ],\n      });\n      const translateService = TestBed.inject(TranslateService);\n      translateService.setDefaultLang('en');\n      jest.useFakeTimers();\n      extAlerts = [];\n    });\n\n    it('should produce a proper alert object and fetch it', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert({\n          type: 'success',\n          message: 'Hello Jhipster',\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        })\n      ).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a proper alert object and add it to external alert objects array', inject(\n      [AlertService],\n      (service: AlertService) => {\n        expect(\n          service.addAlert(\n            {\n              type: 'success',\n              message: 'Hello Jhipster',\n              timeout: 3000,\n              toast: true,\n              position: 'top left',\n            },\n            extAlerts\n          )\n        ).toEqual(\n          jasmine.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n\n        expect(extAlerts.length).toBe(1);\n        expect(extAlerts[0]).toEqual(\n          jasmine.objectContaining({\n            type: 'success',\n            message: 'Hello Jhipster',\n            id: 0,\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce an alert object with correct id', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster success' })).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 1,\n        } as Alert)\n      );\n    }));\n\n    it('should close an alert correctly', inject([AlertService], (service: AlertService) => {\n      const alert0 = service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      const alert1 = service.addAlert({ type: 'info', message: 'Hello Jhipster info 2' });\n      const alert2 = service.addAlert({ type: 'success', message: 'Hello Jhipster success' });\n      expect(alert2).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(3);\n      alert1.close?.(service.get());\n      expect(service.get().length).toBe(2);\n      expect(service.get()[1]).not.toEqual(\n        jasmine.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster info 2',\n          id: 1,\n        } as Alert)\n      );\n      alert2.close?.(service.get());\n      expect(service.get().length).toBe(1);\n      expect(service.get()[0]).not.toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster success',\n          id: 2,\n        } as Alert)\n      );\n      alert0.close?.(service.get());\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should close an alert on timeout correctly', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n\n      expect(service.get().length).toBe(1);\n\n      jest.advanceTimersByTime(6000);\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should clear alerts', inject([AlertService], (service: AlertService) => {\n      service.addAlert({ type: 'info', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'danger', message: 'Hello Jhipster info' });\n      service.addAlert({ type: 'success', message: 'Hello Jhipster info' });\n      expect(service.get().length).toBe(3);\n      service.clear();\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a scoped alert', inject([AlertService], (service: AlertService) => {\n      expect(\n        service.addAlert(\n          {\n            type: 'success',\n            message: 'Hello Jhipster',\n            timeout: 3000,\n            toast: true,\n            position: 'top left',\n          },\n          []\n        )\n      ).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          id: 0,\n          timeout: 3000,\n          toast: true,\n          position: 'top left',\n        } as Alert)\n      );\n\n      expect(service.get().length).toBe(0);\n    }));\n\n    it('should produce a success message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster' })).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a success message with custom position', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'success', message: 'Hello Jhipster', position: 'bottom left' })).toEqual(\n        jasmine.objectContaining({\n          type: 'success',\n          message: 'Hello Jhipster',\n          position: 'bottom left',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a error message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'danger', message: 'Hello Jhipster' })).toEqual(\n        jasmine.objectContaining({\n          type: 'danger',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a warning message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'warning', message: 'Hello Jhipster' })).toEqual(\n        jasmine.objectContaining({\n          type: 'warning',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a info message', inject([AlertService], (service: AlertService) => {\n      expect(service.addAlert({ type: 'info', message: 'Hello Jhipster' })).toEqual(\n        jasmine.objectContaining({\n          type: 'info',\n          message: 'Hello Jhipster',\n        } as Alert)\n      );\n    }));\n\n    it('should produce a info message with translated message if key exists', inject(\n      [AlertService, TranslateService],\n      (service: AlertService, translateService: TranslateService) => {\n        translateService.setTranslation('en', {\n          'hello.jhipster': 'Translated message',\n        });\n        expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(\n          jasmine.objectContaining({\n            type: 'info',\n            message: 'Translated message',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce a info message with provided message if key does not exists', inject(\n      [AlertService, TranslateService],\n      (service: AlertService) => {\n        expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(\n          jasmine.objectContaining({\n            type: 'info',\n            message: 'Hello Jhipster',\n          } as Alert)\n        );\n      }\n    ));\n\n    it('should produce a info message with provided key if transltion key does not exist in translations and message is not provided', inject(\n      [AlertService, TranslateService],\n      (service: AlertService) => {\n        expect(service.addAlert({ type: 'info', translationKey: 'hello.jhipster' })).toEqual(\n          jasmine.objectContaining({\n            type: 'info',\n            message: 'hello.jhipster',\n          } as Alert)\n        );\n      }\n    ));\n  });\n});\n"],"version":3}