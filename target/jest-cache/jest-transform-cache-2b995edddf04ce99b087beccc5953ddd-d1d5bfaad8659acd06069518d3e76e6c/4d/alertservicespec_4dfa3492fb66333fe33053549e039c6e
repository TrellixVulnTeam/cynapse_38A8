d52ae278766edc5c652ac7e9d6ee66cd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const core_1 = require("@ngx-translate/core");
const translation_config_1 = require("../../config/translation.config");
const alert_service_1 = require("./alert.service");
describe('Alert service test', () => {
    describe('Alert Service Test', () => {
        let extAlerts;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [
                    core_1.TranslateModule.forRoot({
                        missingTranslationHandler: {
                            provide: core_1.MissingTranslationHandler,
                            useFactory: translation_config_1.missingTranslationHandler,
                        },
                    }),
                ],
            });
            const translateService = testing_1.TestBed.inject(core_1.TranslateService);
            translateService.setDefaultLang('en');
            jest.useFakeTimers();
            extAlerts = [];
        });
        it('should produce a proper alert object and fetch it', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            })).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(service.get().length).toBe(1);
            expect(service.get()[0]).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
        }));
        it('should produce a proper alert object and add it to external alert objects array', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            }, extAlerts)).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(extAlerts.length).toBe(1);
            expect(extAlerts[0]).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
        }));
        it('should produce an alert object with correct id', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster success' })).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 1,
            }));
            expect(service.get().length).toBe(2);
            expect(service.get()[1]).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 1,
            }));
        }));
        it('should close an alert correctly', testing_1.inject([alert_service_1.AlertService], (service) => {
            var _a, _b, _c;
            const alert0 = service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            const alert1 = service.addAlert({ type: 'info', message: 'Hello Jhipster info 2' });
            const alert2 = service.addAlert({ type: 'success', message: 'Hello Jhipster success' });
            expect(alert2).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 2,
            }));
            expect(service.get().length).toBe(3);
            (_a = alert1.close) === null || _a === void 0 ? void 0 : _a.call(alert1, service.get());
            expect(service.get().length).toBe(2);
            expect(service.get()[1]).not.toEqual(jasmine.objectContaining({
                type: 'info',
                message: 'Hello Jhipster info 2',
                id: 1,
            }));
            (_b = alert2.close) === null || _b === void 0 ? void 0 : _b.call(alert2, service.get());
            expect(service.get().length).toBe(1);
            expect(service.get()[0]).not.toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster success',
                id: 2,
            }));
            (_c = alert0.close) === null || _c === void 0 ? void 0 : _c.call(alert0, service.get());
            expect(service.get().length).toBe(0);
        }));
        it('should close an alert on timeout correctly', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            expect(service.get().length).toBe(1);
            jest.advanceTimersByTime(6000);
            expect(service.get().length).toBe(0);
        }));
        it('should clear alerts', testing_1.inject([alert_service_1.AlertService], (service) => {
            service.addAlert({ type: 'info', message: 'Hello Jhipster info' });
            service.addAlert({ type: 'danger', message: 'Hello Jhipster info' });
            service.addAlert({ type: 'success', message: 'Hello Jhipster info' });
            expect(service.get().length).toBe(3);
            service.clear();
            expect(service.get().length).toBe(0);
        }));
        it('should produce a scoped alert', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({
                type: 'success',
                message: 'Hello Jhipster',
                timeout: 3000,
                toast: true,
                position: 'top left',
            }, [])).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                id: 0,
                timeout: 3000,
                toast: true,
                position: 'top left',
            }));
            expect(service.get().length).toBe(0);
        }));
        it('should produce a success message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster' })).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a success message with custom position', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'success', message: 'Hello Jhipster', position: 'bottom left' })).toEqual(jasmine.objectContaining({
                type: 'success',
                message: 'Hello Jhipster',
                position: 'bottom left',
            }));
        }));
        it('should produce a error message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'danger', message: 'Hello Jhipster' })).toEqual(jasmine.objectContaining({
                type: 'danger',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a warning message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'warning', message: 'Hello Jhipster' })).toEqual(jasmine.objectContaining({
                type: 'warning',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message', testing_1.inject([alert_service_1.AlertService], (service) => {
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster' })).toEqual(jasmine.objectContaining({
                type: 'info',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message with translated message if key exists', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service, translateService) => {
            translateService.setTranslation('en', {
                'hello.jhipster': 'Translated message',
            });
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(jasmine.objectContaining({
                type: 'info',
                message: 'Translated message',
            }));
        }));
        it('should produce a info message with provided message if key does not exists', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service) => {
            expect(service.addAlert({ type: 'info', message: 'Hello Jhipster', translationKey: 'hello.jhipster' })).toEqual(jasmine.objectContaining({
                type: 'info',
                message: 'Hello Jhipster',
            }));
        }));
        it('should produce a info message with provided key if transltion key does not exist in translations and message is not provided', testing_1.inject([alert_service_1.AlertService, core_1.TranslateService], (service) => {
            expect(service.addAlert({ type: 'info', translationKey: 'hello.jhipster' })).toEqual(jasmine.objectContaining({
                type: 'info',
                message: 'hello.jhipster',
            }));
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2NvcmUvdXRpbC9hbGVydC5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBd0Q7QUFDeEQsOENBQW1HO0FBQ25HLHdFQUE0RTtBQUU1RSxtREFBc0Q7QUFFdEQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLElBQUksU0FBa0IsQ0FBQztRQUV2QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFO29CQUNQLHNCQUFlLENBQUMsT0FBTyxDQUFDO3dCQUN0Qix5QkFBeUIsRUFBRTs0QkFDekIsT0FBTyxFQUFFLGdDQUF5Qjs0QkFDbEMsVUFBVSxFQUFFLDhDQUF5Qjt5QkFDdEM7cUJBQ0YsQ0FBQztpQkFDSDthQUNGLENBQUMsQ0FBQztZQUNILE1BQU0sZ0JBQWdCLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsdUJBQWdCLENBQUMsQ0FBQztZQUMxRCxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLDRCQUFZLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsRUFBRTtZQUN2RyxNQUFNLENBQ0osT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDZixJQUFJLEVBQUUsU0FBUztnQkFDZixPQUFPLEVBQUUsZ0JBQWdCO2dCQUN6QixPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsSUFBSTtnQkFDWCxRQUFRLEVBQUUsVUFBVTthQUNyQixDQUFDLENBQ0gsQ0FBQyxPQUFPLENBQ1AsT0FBTyxDQUFD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RUFBRSxDQUFDLDhIQUE4SCxFQUFFLGdCQUFNLENBQ3ZJLENBQUMsNEJBQVksRUFBRSx1QkFBZ0IsQ0FBQyxFQUNoQyxDQUFDLE9BQXFCLEVBQUUsRUFBRTtZQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDbEYsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2dCQUN2QixJQUFJLEVBQUUsTUFBTTtnQkFDWixPQUFPLEVBQUUsZ0JBQWdCO2FBQ2pCLENBQUMsQ0FDWixDQUFDO1FBQ0osQ0FBQyxDQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2NvcmUvdXRpbC9hbGVydC5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSwgVHJhbnNsYXRlU2VydmljZSwgTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciB9IGZyb20gJy4uLy4uL2NvbmZpZy90cmFuc2xhdGlvbi5jb25maWcnO1xuXG5pbXBvcnQgeyBBbGVydCwgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi9hbGVydC5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0FsZXJ0IHNlcnZpY2UgdGVzdCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJ0FsZXJ0IFNlcnZpY2UgVGVzdCcsICgpID0+IHtcbiAgICBsZXQgZXh0QWxlcnRzOiBBbGVydFtdO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgICAgICAgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlcjoge1xuICAgICAgICAgICAgICBwcm92aWRlOiBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLFxuICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdHJhbnNsYXRlU2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFRyYW5zbGF0ZVNlcnZpY2UpO1xuICAgICAgdHJhbnNsYXRlU2VydmljZS5zZXREZWZhdWx0TGFuZygnZW4nKTtcbiAgICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgICAgZXh0QWxlcnRzID0gW107XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBwcm9wZXIgYWxlcnQgb2JqZWN0IGFuZCBmZXRjaCBpdCcsIGluamVjdChbQWxlcnRTZXJ2aWNlXSwgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBzZXJ2aWNlLmFkZEFsZXJ0KHtcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyJyxcbiAgICAgICAgICB0aW1lb3V0OiAzMDAwLFxuICAgICAgICAgIHRvYXN0OiB0cnVlLFxuICAgICAgICAgIHBvc2l0aW9uOiAndG9wIGxlZnQnLFxuICAgICAgICB9KVxuICAgICAgKS50b0VxdWFsKFxuICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICAgIGlkOiAwLFxuICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgdG9hc3Q6IHRydWUsXG4gICAgICAgICAgcG9zaXRpb246ICd0b3AgbGVmdCcsXG4gICAgICAgIH0gYXMgQWxlcnQpXG4gICAgICApO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKVswXSkudG9FcXVhbChcbiAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyJyxcbiAgICAgICAgICBpZDogMCxcbiAgICAgICAgICB0aW1lb3V0OiAzMDAwLFxuICAgICAgICAgIHRvYXN0OiB0cnVlLFxuICAgICAgICAgIHBvc2l0aW9uOiAndG9wIGxlZnQnLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBwcm9wZXIgYWxlcnQgb2JqZWN0IGFuZCBhZGQgaXQgdG8gZXh0ZXJuYWwgYWxlcnQgb2JqZWN0cyBhcnJheScsIGluamVjdChcbiAgICAgIFtBbGVydFNlcnZpY2VdLFxuICAgICAgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgc2VydmljZS5hZGRBbGVydChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICAgICAgICB0aW1lb3V0OiAzMDAwLFxuICAgICAgICAgICAgICB0b2FzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AgbGVmdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXh0QWxlcnRzXG4gICAgICAgICAgKVxuICAgICAgICApLnRvRXF1YWwoXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlcicsXG4gICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgICB0b2FzdDogdHJ1ZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wIGxlZnQnLFxuICAgICAgICAgIH0gYXMgQWxlcnQpXG4gICAgICAgICk7XG5cbiAgICAgICAgZXhwZWN0KGV4dEFsZXJ0cy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChleHRBbGVydHNbMF0pLnRvRXF1YWwoXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlcicsXG4gICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgICB0b2FzdDogdHJ1ZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wIGxlZnQnLFxuICAgICAgICAgIH0gYXMgQWxlcnQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYW4gYWxlcnQgb2JqZWN0IHdpdGggY29ycmVjdCBpZCcsIGluamVjdChbQWxlcnRTZXJ2aWNlXSwgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgc2VydmljZS5hZGRBbGVydCh7IHR5cGU6ICdpbmZvJywgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyIGluZm8nIH0pO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuYWRkQWxlcnQoeyB0eXBlOiAnc3VjY2VzcycsIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBzdWNjZXNzJyB9KSkudG9FcXVhbChcbiAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyIHN1Y2Nlc3MnLFxuICAgICAgICAgIGlkOiAxLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KCkubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KClbMV0pLnRvRXF1YWwoXG4gICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBzdWNjZXNzJyxcbiAgICAgICAgICBpZDogMSxcbiAgICAgICAgfSBhcyBBbGVydClcbiAgICAgICk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCBjbG9zZSBhbiBhbGVydCBjb3JyZWN0bHknLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGNvbnN0IGFsZXJ0MCA9IHNlcnZpY2UuYWRkQWxlcnQoeyB0eXBlOiAnaW5mbycsIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBpbmZvJyB9KTtcbiAgICAgIGNvbnN0IGFsZXJ0MSA9IHNlcnZpY2UuYWRkQWxlcnQoeyB0eXBlOiAnaW5mbycsIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBpbmZvIDInIH0pO1xuICAgICAgY29uc3QgYWxlcnQyID0gc2VydmljZS5hZGRBbGVydCh7IHR5cGU6ICdzdWNjZXNzJywgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyIHN1Y2Nlc3MnIH0pO1xuICAgICAgZXhwZWN0KGFsZXJ0MikudG9FcXVhbChcbiAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyIHN1Y2Nlc3MnLFxuICAgICAgICAgIGlkOiAyLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KCkubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgYWxlcnQxLmNsb3NlPy4oc2VydmljZS5nZXQoKSk7XG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKS5sZW5ndGgpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKVsxXSkubm90LnRvRXF1YWwoXG4gICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdHlwZTogJ2luZm8nLFxuICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBpbmZvIDInLFxuICAgICAgICAgIGlkOiAxLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICAgIGFsZXJ0Mi5jbG9zZT8uKHNlcnZpY2UuZ2V0KCkpO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KCkubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KClbMF0pLm5vdC50b0VxdWFsKFxuICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXIgc3VjY2VzcycsXG4gICAgICAgICAgaWQ6IDIsXG4gICAgICAgIH0gYXMgQWxlcnQpXG4gICAgICApO1xuICAgICAgYWxlcnQwLmNsb3NlPy4oc2VydmljZS5nZXQoKSk7XG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCBjbG9zZSBhbiBhbGVydCBvbiB0aW1lb3V0IGNvcnJlY3RseScsIGluamVjdChbQWxlcnRTZXJ2aWNlXSwgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgc2VydmljZS5hZGRBbGVydCh7IHR5cGU6ICdpbmZvJywgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyIGluZm8nIH0pO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5nZXQoKS5sZW5ndGgpLnRvQmUoMSk7XG5cbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg2MDAwKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0KCkubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgYWxlcnRzJywgaW5qZWN0KFtBbGVydFNlcnZpY2VdLCAoc2VydmljZTogQWxlcnRTZXJ2aWNlKSA9PiB7XG4gICAgICBzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ2luZm8nLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXIgaW5mbycgfSk7XG4gICAgICBzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ2RhbmdlcicsIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBpbmZvJyB9KTtcbiAgICAgIHNlcnZpY2UuYWRkQWxlcnQoeyB0eXBlOiAnc3VjY2VzcycsIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlciBpbmZvJyB9KTtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdldCgpLmxlbmd0aCkudG9CZSgzKTtcbiAgICAgIHNlcnZpY2UuY2xlYXIoKTtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdldCgpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBzY29wZWQgYWxlcnQnLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgc2VydmljZS5hZGRBbGVydChcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICAgICAgdGltZW91dDogMzAwMCxcbiAgICAgICAgICAgIHRvYXN0OiB0cnVlLFxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AgbGVmdCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXVxuICAgICAgICApXG4gICAgICApLnRvRXF1YWwoXG4gICAgICAgIGphc21pbmUub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlcicsXG4gICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgdGltZW91dDogMzAwMCxcbiAgICAgICAgICB0b2FzdDogdHJ1ZSxcbiAgICAgICAgICBwb3NpdGlvbjogJ3RvcCBsZWZ0JyxcbiAgICAgICAgfSBhcyBBbGVydClcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdldCgpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBzdWNjZXNzIG1lc3NhZ2UnLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ3N1Y2Nlc3MnLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInIH0pKS50b0VxdWFsKFxuICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBzdWNjZXNzIG1lc3NhZ2Ugd2l0aCBjdXN0b20gcG9zaXRpb24nLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ3N1Y2Nlc3MnLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLCBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyB9KSkudG9FcXVhbChcbiAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyxcbiAgICAgICAgfSBhcyBBbGVydClcbiAgICAgICk7XG4gICAgfSkpO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm9kdWNlIGEgZXJyb3IgbWVzc2FnZScsIGluamVjdChbQWxlcnRTZXJ2aWNlXSwgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgZXhwZWN0KHNlcnZpY2UuYWRkQWxlcnQoeyB0eXBlOiAnZGFuZ2VyJywgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyJyB9KSkudG9FcXVhbChcbiAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0eXBlOiAnZGFuZ2VyJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSB3YXJuaW5nIG1lc3NhZ2UnLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ3dhcm5pbmcnLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInIH0pKS50b0VxdWFsKFxuICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBpbmZvIG1lc3NhZ2UnLCBpbmplY3QoW0FsZXJ0U2VydmljZV0sIChzZXJ2aWNlOiBBbGVydFNlcnZpY2UpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ2luZm8nLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInIH0pKS50b0VxdWFsKFxuICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHR5cGU6ICdpbmZvJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLFxuICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgKTtcbiAgICB9KSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb2R1Y2UgYSBpbmZvIG1lc3NhZ2Ugd2l0aCB0cmFuc2xhdGVkIG1lc3NhZ2UgaWYga2V5IGV4aXN0cycsIGluamVjdChcbiAgICAgIFtBbGVydFNlcnZpY2UsIFRyYW5zbGF0ZVNlcnZpY2VdLFxuICAgICAgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSwgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkgPT4ge1xuICAgICAgICB0cmFuc2xhdGVTZXJ2aWNlLnNldFRyYW5zbGF0aW9uKCdlbicsIHtcbiAgICAgICAgICAnaGVsbG8uamhpcHN0ZXInOiAnVHJhbnNsYXRlZCBtZXNzYWdlJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ2luZm8nLCBtZXNzYWdlOiAnSGVsbG8gSmhpcHN0ZXInLCB0cmFuc2xhdGlvbktleTogJ2hlbGxvLmpoaXBzdGVyJyB9KSkudG9FcXVhbChcbiAgICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RyYW5zbGF0ZWQgbWVzc2FnZScsXG4gICAgICAgICAgfSBhcyBBbGVydClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApKTtcblxuICAgIGl0KCdzaG91bGQgcHJvZHVjZSBhIGluZm8gbWVzc2FnZSB3aXRoIHByb3ZpZGVkIG1lc3NhZ2UgaWYga2V5IGRvZXMgbm90IGV4aXN0cycsIGluamVjdChcbiAgICAgIFtBbGVydFNlcnZpY2UsIFRyYW5zbGF0ZVNlcnZpY2VdLFxuICAgICAgKHNlcnZpY2U6IEFsZXJ0U2VydmljZSkgPT4ge1xuICAgICAgICBleHBlY3Qoc2VydmljZS5hZGRBbGVydCh7IHR5cGU6ICdpbmZvJywgbWVzc2FnZTogJ0hlbGxvIEpoaXBzdGVyJywgdHJhbnNsYXRpb25LZXk6ICdoZWxsby5qaGlwc3RlcicgfSkpLnRvRXF1YWwoXG4gICAgICAgICAgamFzbWluZS5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIHR5cGU6ICdpbmZvJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBKaGlwc3RlcicsXG4gICAgICAgICAgfSBhcyBBbGVydClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApKTtcblxuICAgIGl0KCdzaG91bGQgcHJvZHVjZSBhIGluZm8gbWVzc2FnZSB3aXRoIHByb3ZpZGVkIGtleSBpZiB0cmFuc2x0aW9uIGtleSBkb2VzIG5vdCBleGlzdCBpbiB0cmFuc2xhdGlvbnMgYW5kIG1lc3NhZ2UgaXMgbm90IHByb3ZpZGVkJywgaW5qZWN0KFxuICAgICAgW0FsZXJ0U2VydmljZSwgVHJhbnNsYXRlU2VydmljZV0sXG4gICAgICAoc2VydmljZTogQWxlcnRTZXJ2aWNlKSA9PiB7XG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmFkZEFsZXJ0KHsgdHlwZTogJ2luZm8nLCB0cmFuc2xhdGlvbktleTogJ2hlbGxvLmpoaXBzdGVyJyB9KSkudG9FcXVhbChcbiAgICAgICAgICBqYXNtaW5lLm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ2hlbGxvLmpoaXBzdGVyJyxcbiAgICAgICAgICB9IGFzIEFsZXJ0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICkpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9