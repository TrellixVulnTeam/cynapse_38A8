{"version":3,"sources":["/home/karthik/cynapseTech/src/main/webapp/app/shared/alert/alert-error.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["import { Component, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AlertError } from './alert-error.model';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\n\n@Component({\n  selector: 'jhi-alert-error',\n  templateUrl: './alert-error.component.html',\n})\nexport class AlertErrorComponent implements OnDestroy {\n  alerts: Alert[] = [];\n  errorListener: Subscription;\n  httpErrorListener: Subscription;\n\n  constructor(private alertService: AlertService, private eventManager: EventManager, translateService: TranslateService) {\n    this.errorListener = eventManager.subscribe('cynapseTechApp.error', (response: EventWithContent<unknown> | string) => {\n      const errorResponse = (response as EventWithContent<AlertError>).content;\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n    });\n\n    this.httpErrorListener = eventManager.subscribe('cynapseTechApp.httpError', (response: EventWithContent<unknown> | string) => {\n      const httpErrorResponse = (response as EventWithContent<HttpErrorResponse>).content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n          break;\n\n        case 400: {\n          const arr = httpErrorResponse.headers.keys();\n          let errorHeader: string | null = null;\n          let entityKey: string | null = null;\n          for (const entry of arr) {\n            if (entry.toLowerCase().endsWith('app-error')) {\n              errorHeader = httpErrorResponse.headers.get(entry);\n            } else if (entry.toLowerCase().endsWith('app-params')) {\n              entityKey = httpErrorResponse.headers.get(entry);\n            }\n          }\n          if (errorHeader) {\n            const alertData = entityKey ? { entityName: translateService.instant(`global.menu.entities.${entityKey}`) } : undefined;\n            this.addErrorAlert(errorHeader, errorHeader, alertData);\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n            const fieldErrors = httpErrorResponse.error.fieldErrors;\n            for (const fieldError of fieldErrors) {\n              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                fieldError.message = 'Size';\n              }\n              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n              const convertedField: string = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n              const fieldName: string = translateService.instant(`cynapseTechApp.${fieldError.objectName as string}.${convertedField}`);\n              this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message as string}`, { fieldName });\n            }\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n          break;\n        }\n\n        case 404:\n          this.addErrorAlert('Not found', 'error.url.not.found');\n          break;\n\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n      }\n    });\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n\n  private addErrorAlert(message?: string, translationKey?: string, translationParams?: { [key: string]: unknown }): void {\n    this.alertService.addAlert({ type: 'danger', message, translationKey, translationParams }, this.alerts);\n  }\n}\n"]}