a2e74fa53817afca82a292ee608cd7bf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const event_manager_service_1 = require("./event-manager.service");
describe('Event Manager test', () => {
    describe('Event Manager Test', () => {
        let recievedEvent;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                providers: [event_manager_service_1.EventManager],
            });
            recievedEvent = null;
        });
        it('should not fail when nosubscriber and broadcasting', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            expect(eventManager.observer).toBeUndefined();
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted EventWithContent', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast({ name: 'unrelatedModifier', content: 'unreleated modification' });
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
        }));
        it('should create an observable and callback when broadcasted string', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe('modifier', (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast('modifier');
            // THEN
            expect(recievedEvent).toEqual('modifier');
        }));
        it('should subscribe to multiple events', testing_1.inject([event_manager_service_1.EventManager], (eventManager) => {
            // GIVEN
            eventManager.subscribe(['modifier', 'modifier2'], (event) => (recievedEvent = event));
            // WHEN
            eventManager.broadcast('unrelatedModifier');
            // THEN
            expect(recievedEvent).toBeNull();
            // WHEN
            eventManager.broadcast({ name: 'modifier', content: 'modified something' });
            // THEN
            expect(recievedEvent).toEqual({ name: 'modifier', content: 'modified something' });
            // WHEN
            eventManager.broadcast('modifier2');
            // THEN
            expect(recievedEvent).toEqual('modifier2');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2FydGhpay9jeW5hcHNlVGVjaC9zcmMvbWFpbi93ZWJhcHAvYXBwL2NvcmUvdXRpbC9ldmVudC1tYW5hZ2VyLnNlcnZpY2Uuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF3RDtBQUV4RCxtRUFBeUU7QUFFekUsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLElBQUksYUFBd0QsQ0FBQztRQUU3RCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsU0FBUyxFQUFFLENBQUMsb0NBQVksQ0FBQzthQUMxQixDQUFDLENBQUM7WUFDSCxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLGdCQUFNLENBQUMsQ0FBQyxvQ0FBWSxDQUFDLEVBQUUsQ0FBQyxZQUEwQixFQUFFLEVBQUU7WUFDN0csTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM5QyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQzlFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMsNEVBQTRFLEVBQUUsZ0JBQU0sQ0FDckYsQ0FBQyxvQ0FBWSxDQUFDLEVBQ2QsQ0FBQyxZQUEwQixFQUFFLEVBQUU7WUFDN0IsUUFBUTtZQUNSLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBeUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUUzRyxPQUFPO1lBQ1AsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1lBQzFGLE9BQU87WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFakMsT0FBTztZQUNQLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7WUFDNUUsT0FBTztZQUNQLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUNGLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxrRUFBa0UsRUFBRSxnQkFBTSxDQUFDLENBQUMsb0NBQVksQ0FBQyxFQUFFLENBQUMsWUFBMEIsRUFBRSxFQUFFO1lBQzNILFFBQVE7WUFDUixZQUFZLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFM0csT0FBTztZQUNQLFlBQVksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM1QyxPQUFPO1lBQ1AsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWpDLE9BQU87WUFDUCxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ25DLE9BQU87WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixFQUFFLENBQUMscUNBQXFDLEVBQUUsZ0JBQU0sQ0FBQyxDQUFDLG9DQUFZLENBQUMsRUFBRSxDQUFDLFlBQTBCLEVBQUUsRUFBRTtZQUM5RixRQUFRO1lBQ1IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFMUgsT0FBTztZQUNQLFlBQVksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM1QyxPQUFPO1lBQ1AsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWpDLE9BQU87WUFDUCxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBQzVFLE9BQU87WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBRW5GLE9BQU87WUFDUCxZQUFZLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3BDLE9BQU87WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2thcnRoaWsvY3luYXBzZVRlY2gvc3JjL21haW4vd2ViYXBwL2FwcC9jb3JlL3V0aWwvZXZlbnQtbWFuYWdlci5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcblxuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyLCBFdmVudFdpdGhDb250ZW50IH0gZnJvbSAnLi9ldmVudC1tYW5hZ2VyLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnRXZlbnQgTWFuYWdlciB0ZXN0JywgKCkgPT4ge1xuICBkZXNjcmliZSgnRXZlbnQgTWFuYWdlciBUZXN0JywgKCkgPT4ge1xuICAgIGxldCByZWNpZXZlZEV2ZW50OiBFdmVudFdpdGhDb250ZW50PHVua25vd24+IHwgc3RyaW5nIHwgbnVsbDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgcHJvdmlkZXJzOiBbRXZlbnRNYW5hZ2VyXSxcbiAgICAgIH0pO1xuICAgICAgcmVjaWV2ZWRFdmVudCA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBmYWlsIHdoZW4gbm9zdWJzY3JpYmVyIGFuZCBicm9hZGNhc3RpbmcnLCBpbmplY3QoW0V2ZW50TWFuYWdlcl0sIChldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikgPT4ge1xuICAgICAgZXhwZWN0KGV2ZW50TWFuYWdlci5vYnNlcnZlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCh7IG5hbWU6ICdtb2RpZmllcicsIGNvbnRlbnQ6ICdtb2RpZmllZCBzb21ldGhpbmcnIH0pO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIG9ic2VydmFibGUgYW5kIGNhbGxiYWNrIHdoZW4gYnJvYWRjYXN0ZWQgRXZlbnRXaXRoQ29udGVudCcsIGluamVjdChcbiAgICAgIFtFdmVudE1hbmFnZXJdLFxuICAgICAgKGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyKSA9PiB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGV2ZW50TWFuYWdlci5zdWJzY3JpYmUoJ21vZGlmaWVyJywgKGV2ZW50OiBFdmVudFdpdGhDb250ZW50PHVua25vd24+IHwgc3RyaW5nKSA9PiAocmVjaWV2ZWRFdmVudCA9IGV2ZW50KSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KHsgbmFtZTogJ3VucmVsYXRlZE1vZGlmaWVyJywgY29udGVudDogJ3VucmVsZWF0ZWQgbW9kaWZpY2F0aW9uJyB9KTtcbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9CZU51bGwoKTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoeyBuYW1lOiAnbW9kaWZpZXInLCBjb250ZW50OiAnbW9kaWZpZWQgc29tZXRoaW5nJyB9KTtcbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9FcXVhbCh7IG5hbWU6ICdtb2RpZmllcicsIGNvbnRlbnQ6ICdtb2RpZmllZCBzb21ldGhpbmcnIH0pO1xuICAgICAgfVxuICAgICkpO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gb2JzZXJ2YWJsZSBhbmQgY2FsbGJhY2sgd2hlbiBicm9hZGNhc3RlZCBzdHJpbmcnLCBpbmplY3QoW0V2ZW50TWFuYWdlcl0sIChldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikgPT4ge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGV2ZW50TWFuYWdlci5zdWJzY3JpYmUoJ21vZGlmaWVyJywgKGV2ZW50OiBFdmVudFdpdGhDb250ZW50PHVua25vd24+IHwgc3RyaW5nKSA9PiAocmVjaWV2ZWRFdmVudCA9IGV2ZW50KSk7XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGV2ZW50TWFuYWdlci5icm9hZGNhc3QoJ3VucmVsYXRlZE1vZGlmaWVyJyk7XG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9CZU51bGwoKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCgnbW9kaWZpZXInKTtcbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0VxdWFsKCdtb2RpZmllcicpO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgc3Vic2NyaWJlIHRvIG11bHRpcGxlIGV2ZW50cycsIGluamVjdChbRXZlbnRNYW5hZ2VyXSwgKGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyKSA9PiB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgZXZlbnRNYW5hZ2VyLnN1YnNjcmliZShbJ21vZGlmaWVyJywgJ21vZGlmaWVyMiddLCAoZXZlbnQ6IEV2ZW50V2l0aENvbnRlbnQ8dW5rbm93bj4gfCBzdHJpbmcpID0+IChyZWNpZXZlZEV2ZW50ID0gZXZlbnQpKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCgndW5yZWxhdGVkTW9kaWZpZXInKTtcbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0JlTnVsbCgpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KHsgbmFtZTogJ21vZGlmaWVyJywgY29udGVudDogJ21vZGlmaWVkIHNvbWV0aGluZycgfSk7XG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QocmVjaWV2ZWRFdmVudCkudG9FcXVhbCh7IG5hbWU6ICdtb2RpZmllcicsIGNvbnRlbnQ6ICdtb2RpZmllZCBzb21ldGhpbmcnIH0pO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBldmVudE1hbmFnZXIuYnJvYWRjYXN0KCdtb2RpZmllcjInKTtcbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChyZWNpZXZlZEV2ZW50KS50b0VxdWFsKCdtb2RpZmllcjInKTtcbiAgICB9KSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=