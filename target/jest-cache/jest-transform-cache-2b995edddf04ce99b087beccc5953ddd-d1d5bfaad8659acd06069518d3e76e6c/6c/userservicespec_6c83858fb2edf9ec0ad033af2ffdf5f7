614ab68d5a9a40a9f54a913ad38a62f2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const user_model_1 = require("./user.model");
const user_service_1 = require("./user.service");
describe('Service Tests', () => {
    describe('User Service', () => {
        let service;
        let httpMock;
        let expectedResult;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            service = testing_1.TestBed.inject(user_service_1.UserService);
            httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('Service methods', () => {
            it('should return Users', () => {
                service.query().subscribe(received => {
                    expectedResult = received.body;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([new user_model_1.User(123, 'user')]);
                expect(expectedResult).toEqual([{ id: 123, login: 'user' }]);
            });
            it('should propagate not found response', () => {
                service.query().subscribe({
                    error: (error) => (expectedResult = error.status),
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush('Internal Server Error', {
                    status: 500,
                    statusText: 'Inernal Server Error',
                });
                expect(expectedResult).toEqual(500);
            });
            describe('addUserToCollectionIfMissing', () => {
                it('should add a User to an empty array', () => {
                    const user = { id: 123 };
                    expectedResult = service.addUserToCollectionIfMissing([], user);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(user);
                });
                it('should not add a User to an array that contains it', () => {
                    const user = { id: 123 };
                    const userCollection = [
                        Object.assign({}, user),
                        { id: 456 },
                    ];
                    expectedResult = service.addUserToCollectionIfMissing(userCollection, user);
                    expect(expectedResult).toHaveLength(2);
                });
                it("should add a User to an array that doesn't contain it", () => {
                    const user = { id: 123 };
                    const userCollection = [{ id: 456 }];
                    expectedResult = service.addUserToCollectionIfMissing(userCollection, user);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(user);
                });
                it('should add only unique User to an array', () => {
                    const userArray = [{ id: 123 }, { id: 456 }, { id: 27699 }];
                    const userCollection = [{ id: 456 }];
                    expectedResult = service.addUserToCollectionIfMissing(userCollection, ...userArray);
                    expect(expectedResult).toHaveLength(3);
                });
                it('should accept varargs', () => {
                    const user = { id: 123 };
                    const user2 = { id: 456 };
                    expectedResult = service.addUserToCollectionIfMissing([], user, user2);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(user);
                    expect(expectedResult).toContain(user2);
                });
                it('should accept null and undefined values', () => {
                    const user = { id: 123 };
                    expectedResult = service.addUserToCollectionIfMissing([], null, user, undefined);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(user);
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,