76087b86a7b2ab87fd896bd3d3ec9669
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const platform_browser_1 = require("@angular/platform-browser");
const rxjs_1 = require("rxjs");
const core_1 = require("@ngx-translate/core");
const account_service_1 = require("app/core/auth/account.service");
const main_component_1 = require("./main.component");
describe('Component Tests', () => {
    describe('MainComponent', () => {
        let comp;
        let fixture;
        let titleService;
        let translateService;
        let mockAccountService;
        const routerEventsSubject = new rxjs_1.Subject();
        const routerState = { snapshot: { root: { data: {} } } };
        class MockRouter {
            constructor() {
                this.events = routerEventsSubject;
                this.routerState = routerState;
            }
        }
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [core_1.TranslateModule.forRoot()],
                declarations: [main_component_1.MainComponent],
                providers: [
                    platform_browser_1.Title,
                    account_service_1.AccountService,
                    {
                        provide: router_1.Router,
                        useClass: MockRouter,
                    },
                ],
            })
                .overrideTemplate(main_component_1.MainComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(main_component_1.MainComponent);
            comp = fixture.componentInstance;
            titleService = testing_1.TestBed.inject(platform_browser_1.Title);
            translateService = testing_1.TestBed.inject(core_1.TranslateService);
            mockAccountService = testing_1.TestBed.inject(account_service_1.AccountService);
            mockAccountService.identity = jest.fn(() => rxjs_1.of(null));
            mockAccountService.getAuthenticationState = jest.fn(() => rxjs_1.of(null));
        });
        describe('page title', () => {
            const defaultPageTitle = 'global.title';
            const parentRoutePageTitle = 'parentTitle';
            const childRoutePageTitle = 'childTitle';
            const navigationEnd = new router_1.NavigationEnd(1, '', '');
            const langChangeEvent = { lang: 'en', translations: null };
            beforeEach(() => {
                routerState.snapshot.root = { data: {} };
                spyOn(translateService, 'get').and.callFake((key) => rxjs_1.of(key + ' translated'));
                translateService.currentLang = 'en';
                spyOn(titleService, 'setTitle');
                comp.ngOnInit();
            });
            describe('navigation end', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    routerEventsSubject.next(navigationEnd);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
            });
            describe('language change', () => {
                it('should set page title to default title if pageTitle is missing on routes', () => {
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');
                });
                it('should set page title to root route pageTitle if there is no child routes', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
                it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');
                });
                it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
                    // GIVEN
                    routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
                    routerState.snapshot.root.firstChild = { data: {} };
                    // WHEN
                    translateService.onLangChange.emit(langChangeEvent);
                    // THEN
                    expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
                    expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,