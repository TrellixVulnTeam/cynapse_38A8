459dbf12078eaf4d9a328a421503008c
"use strict";

/* istanbul ignore next */
function cov_dgp0mqqko() {
  var path = "/home/karthik/cynapseTech/src/main/webapp/app/core/config/application-config.service.ts";
  var hash = "1dcfb60f09dd87053566e524d95a0ec24f727746";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/karthik/cynapseTech/src/main/webapp/app/core/config/application-config.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 19,
          column: 1
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 45
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "8": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 75
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 46
        }
      },
      "10": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "11": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 38
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 38
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }],
        line: 14
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/home/karthik/cynapseTech/src/main/webapp/app/core/config/application-config.service.ts",
      mappings: ";;;;AAAA,wCAA2C;AAK3C,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;IAArC;QACU,mBAAc,GAAG,EAAE,CAAC;IAY9B,CAAC;IAVC,iBAAiB,CAAC,cAAsB;QACtC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED,cAAc,CAAC,GAAW,EAAE,YAAqB;QAC/C,IAAI,YAAY,EAAE;YAChB,OAAO,GAAG,IAAI,CAAC,cAAc,YAAY,YAAY,IAAI,GAAG,EAAE,CAAC;SAChE;QACD,OAAO,GAAG,IAAI,CAAC,cAAc,GAAG,GAAG,EAAE,CAAC;IACxC,CAAC;CACF,CAAA;AAbY,wBAAwB;IAHpC,iBAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,wBAAwB,CAapC;AAbY,4DAAwB",
      names: [],
      sources: ["/home/karthik/cynapseTech/src/main/webapp/app/core/config/application-config.service.ts"],
      sourcesContent: ["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApplicationConfigService {\n  private endpointPrefix = '';\n\n  setEndpointPrefix(endpointPrefix: string): void {\n    this.endpointPrefix = endpointPrefix;\n  }\n\n  getEndpointFor(api: string, microservice?: string): string {\n    if (microservice) {\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\n    }\n    return `${this.endpointPrefix}${api}`;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1dcfb60f09dd87053566e524d95a0ec24f727746"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dgp0mqqko = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_dgp0mqqko();
cov_dgp0mqqko().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_dgp0mqqko().s[1]++;
exports.ApplicationConfigService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_dgp0mqqko().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_dgp0mqqko().s[3]++, require("@angular/core"));

/* istanbul ignore next */
cov_dgp0mqqko().s[4]++;
let ApplicationConfigService = class ApplicationConfigService {
  constructor() {
    /* istanbul ignore next */
    cov_dgp0mqqko().f[0]++;
    cov_dgp0mqqko().s[5]++;
    this.endpointPrefix = '';
  }

  setEndpointPrefix(endpointPrefix) {
    /* istanbul ignore next */
    cov_dgp0mqqko().f[1]++;
    cov_dgp0mqqko().s[6]++;
    this.endpointPrefix = endpointPrefix;
  }

  getEndpointFor(api, microservice) {
    /* istanbul ignore next */
    cov_dgp0mqqko().f[2]++;
    cov_dgp0mqqko().s[7]++;

    if (microservice) {
      /* istanbul ignore next */
      cov_dgp0mqqko().b[0][0]++;
      cov_dgp0mqqko().s[8]++;
      return `${this.endpointPrefix}services/${microservice}/${api}`;
    } else
    /* istanbul ignore next */
    {
      cov_dgp0mqqko().b[0][1]++;
    }

    cov_dgp0mqqko().s[9]++;
    return `${this.endpointPrefix}${api}`;
  }

};

/* istanbul ignore next */
cov_dgp0mqqko().s[10]++;
ApplicationConfigService = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
})], ApplicationConfigService);

/* istanbul ignore next */
cov_dgp0mqqko().s[11]++;
exports.ApplicationConfigService = ApplicationConfigService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2thcnRoaWsvY3luYXBzZVRlY2gvc3JjL21haW4vd2ViYXBwL2FwcC9jb3JlL2NvbmZpZy9hcHBsaWNhdGlvbi1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFmTCxNQUFBLE1BQUE7QUFBQTtBQUFBLHlCQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTs7OztBQUtBLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQWIsQ0FBcUM7QUFBckMsRUFBQSxXQUFBLEdBQUE7QUFBQTtBQUFBO0FBQUE7QUFDVSxTQUFBLGNBQUEsR0FBaUIsRUFBakI7QUFZVDs7QUFWQyxFQUFBLGlCQUFpQixDQUFDLGNBQUQsRUFBdUI7QUFBQTtBQUFBO0FBQUE7QUFDdEMsU0FBSyxjQUFMLEdBQXNCLGNBQXRCO0FBQ0Q7O0FBRUQsRUFBQSxjQUFjLENBQUMsR0FBRCxFQUFjLFlBQWQsRUFBbUM7QUFBQTtBQUFBO0FBQUE7O0FBQy9DLFFBQUksWUFBSixFQUFrQjtBQUFBO0FBQUE7QUFBQTtBQUNoQixhQUFPLEdBQUcsS0FBSyxjQUFjLFlBQVksWUFBWSxJQUFJLEdBQUcsRUFBNUQ7QUFDRCxLQUZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRCtDO0FBSS9DLFdBQU8sR0FBRyxLQUFLLGNBQWMsR0FBRyxHQUFHLEVBQW5DO0FBQ0Q7O0FBWmtDLENBQXJDOzs7O0FBQWEsd0JBQXdCLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUhwQyxNQUFBLENBQUEsVUFBQSxDQUFXO0FBQ1YsRUFBQSxVQUFVLEVBQUU7QUFERixDQUFYLENBR29DLENBQUEsRUFBeEIsd0JBQXdCLENBQXhCOzs7O0FBQUEsT0FBQSxDQUFBLHdCQUFBLEdBQUEsd0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvbkNvbmZpZ1NlcnZpY2Uge1xuICBwcml2YXRlIGVuZHBvaW50UHJlZml4ID0gJyc7XG5cbiAgc2V0RW5kcG9pbnRQcmVmaXgoZW5kcG9pbnRQcmVmaXg6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZW5kcG9pbnRQcmVmaXggPSBlbmRwb2ludFByZWZpeDtcbiAgfVxuXG4gIGdldEVuZHBvaW50Rm9yKGFwaTogc3RyaW5nLCBtaWNyb3NlcnZpY2U/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChtaWNyb3NlcnZpY2UpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLmVuZHBvaW50UHJlZml4fXNlcnZpY2VzLyR7bWljcm9zZXJ2aWNlfS8ke2FwaX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dGhpcy5lbmRwb2ludFByZWZpeH0ke2FwaX1gO1xuICB9XG59XG4iXX0=