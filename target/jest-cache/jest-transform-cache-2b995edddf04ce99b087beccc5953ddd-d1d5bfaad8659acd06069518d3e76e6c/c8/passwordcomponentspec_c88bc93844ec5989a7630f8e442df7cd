1a09bffdd6821168770d898b5e2f3841
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('app/core/auth/account.service');
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const testing_2 = require("@angular/common/http/testing");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const account_service_1 = require("app/core/auth/account.service");
const password_component_1 = require("./password.component");
const password_service_1 = require("./password.service");
describe('Component Tests', () => {
    describe('PasswordComponent', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.waitForAsync(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
                declarations: [password_component_1.PasswordComponent],
                providers: [forms_1.FormBuilder, account_service_1.AccountService],
            })
                .overrideTemplate(password_component_1.PasswordComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_component_1.PasswordComponent);
            comp = fixture.componentInstance;
            service = testing_1.TestBed.inject(password_service_1.PasswordService);
        });
        it('should show error if passwords do not match', () => {
            // GIVEN
            comp.passwordForm.patchValue({
                newPassword: 'password1',
                confirmPassword: 'password2',
            });
            // WHEN
            comp.changePassword();
            // THEN
            expect(comp.doNotMatch).toBe(true);
            expect(comp.error).toBe(false);
            expect(comp.success).toBe(false);
        });
        it('should call Auth.changePassword when passwords match', () => {
            // GIVEN
            const passwordValues = {
                currentPassword: 'oldPassword',
                newPassword: 'myPassword',
            };
            spyOn(service, 'save').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: true })));
            comp.passwordForm.patchValue({
                currentPassword: passwordValues.currentPassword,
                newPassword: passwordValues.newPassword,
                confirmPassword: passwordValues.newPassword,
            });
            // WHEN
            comp.changePassword();
            // THEN
            expect(service.save).toHaveBeenCalledWith(passwordValues.newPassword, passwordValues.currentPassword);
        });
        it('should set success to true upon success', () => {
            // GIVEN
            spyOn(service, 'save').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: true })));
            comp.passwordForm.patchValue({
                newPassword: 'myPassword',
                confirmPassword: 'myPassword',
            });
            // WHEN
            comp.changePassword();
            // THEN
            expect(comp.doNotMatch).toBe(false);
            expect(comp.error).toBe(false);
            expect(comp.success).toBe(true);
        });
        it('should notify of error if change password fails', () => {
            // GIVEN
            spyOn(service, 'save').and.returnValue(rxjs_1.throwError('ERROR'));
            comp.passwordForm.patchValue({
                newPassword: 'myPassword',
                confirmPassword: 'myPassword',
            });
            // WHEN
            comp.changePassword();
            // THEN
            expect(comp.doNotMatch).toBe(false);
            expect(comp.success).toBe(false);
            expect(comp.error).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,