{"version":3,"sources":["/home/karthik/cynapseTech/src/main/webapp/app/core/auth/account.service.ts"],"names":[],"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { Observable, ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\n\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Account } from 'app/core/auth/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account | null>;\n\n  constructor(\n    private translateService: TranslateService,\n    private sessionStorage: SessionStorageService,\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(account: Account): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\n  }\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe(\n        catchError(() => of(null)),\n        tap((account: Account | null) => {\n          this.authenticate(account);\n\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account?.langKey) {\n            const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\n            this.translateService.use(langKey);\n          }\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$;\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.userIdentity?.imageUrl ?? '';\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n"]}