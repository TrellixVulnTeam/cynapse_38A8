{"version":3,"sources":["/home/karthik/cynapseTech/src/main/webapp/app/core/util/alert.service.ts"],"names":[],"mappingsyBE;;;;;;;;;;;;;;;;;;;;AAzBF,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AACA,MAAA,kBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;AACA,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;AACA,MAAA,oBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;;;;AAmBA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AASvB,EAAA,WAAA,CAAoB,SAApB,EAAqD,MAArD,EAA6E,gBAA7E,EAA+G;AAAA;AAAA;AAAA;AAA3F,SAAA,SAAA,GAAA,SAAA;;AAA2F;AAAA;AAA1D,SAAA,MAAA,GAAA,MAAA;;AAA0D;AAAA;AAAlC,SAAA,gBAAA,GAAA,gBAAA;;AAAkC;AAAA;AAR/G,SAAA,OAAA,GAAU,IAAV;;AAQ+G;AAAA;AAP/G,SAAA,KAAA,GAAQ,KAAR;;AAO+G;AAAA;AAN/G,SAAA,QAAA,GAAW,WAAX,CAM+G,CAJ/G;;AAI+G;AAAA;AAHvG,SAAA,OAAA,GAAU,CAAV;;AAGuG;AAAA;AAFvG,SAAA,MAAA,GAAkB,EAAlB;AAE2G;;AAEnH,EAAA,KAAK,GAAA;AAAA;AAAA;AAAA;AACH,SAAK,MAAL,GAAc,EAAd;AACD;;AAED,EAAA,GAAG,GAAA;AAAA;AAAA;AAAA;AACD,WAAO,KAAK,MAAZ;AACD;AAED;;;;;;;AAOG;;;AACH,EAAA,QAAQ,CAAC,KAAD,EAAe,SAAf,EAAkC;AAAA;AAAA;;;;AAAA;AAAA;AACxC,IAAA,KAAK,CAAC,EAAN,GAAW,KAAK,OAAL,EAAX;;AADwC;AAAA;;AAGxC,QAAI,KAAK,CAAC,cAAV,EAA0B;AAAA;AAAA;AACxB,YAAM,iBAAiB;AAAA;AAAA,iCAAG,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,KAAK,CAAC,cAApC,EAAoD,KAAK,CAAC,iBAA1D,CAAH,CAAvB,CADwB,CAExB;;AAFwB;AAAA;;AAGxB,UAAI,iBAAiB,KAAK,GAAG,oBAAA,CAAA,0BAA0B,IAAI,KAAK,CAAC,cAAc,GAA/E,EAAoF;AAAA;AAAA;AAAA;AAClF,QAAA,KAAK,CAAC,OAAN,GAAgB,iBAAhB;AACD,OAFD,MAEO;AAAA;AAAA;AAAA;;AAAA,YAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AAAA;AAAA;AAAA;AACzB,UAAA,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,cAAtB;AACD,SAFM;AAAA;AAAA;AAAA;AAAA;AAEN;AACF,KARD;AAAA;AAAA;AAAA;AAAA;;AAHwC;AAaxC,IAAA,KAAK,CAAC,OAAN;AAAa;AAAA,kCAAA,EAAA,GAAG,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAA,CAAA,eAAA,CAAgB,IAAxC;AAA4C;AAAA,kCAAA,EAAA,GAAE,KAAK,CAAC,OAAR,MAAe,IAAf;AAAA;AAAA,iCAAe,EAAA,KAAA,KAAA,CAAf;AAAA;AAAA,iCAAe,EAAf;AAAA;AAAA,iCAAmB,EAAnB,CAA5C,CAAH,MAAqE,IAArE;AAAA;AAAA,iCAAqE,EAAA,KAAA,KAAA,CAArE;AAAA;AAAA,iCAAqE,EAArE;AAAA;AAAA,iCAAyE,EAAzE,CAAb;;AAbwC;AAAA;AAcxC,IAAA,KAAK,CAAC,OAAN;AAAa;AAAA,kCAAA,EAAA,GAAG,KAAK,CAAC,OAAT,MAAgB,IAAhB;AAAA;AAAA,iCAAgB,EAAA,KAAA,KAAA,CAAhB;AAAA;AAAA,iCAAgB,EAAhB;AAAA;AAAA,iCAAoB,KAAK,OAAzB,CAAb;;AAdwC;AAAA;AAexC,IAAA,KAAK,CAAC,KAAN;AAAW;AAAA,mCAAA,EAAA,GAAG,KAAK,CAAC,KAAT,MAAc,IAAd;AAAA;AAAA,kCAAc,EAAA,KAAA,KAAA,CAAd;AAAA;AAAA,iCAAc,EAAd;AAAA;AAAA,iCAAkB,KAAK,KAAvB,CAAX;;AAfwC;AAAA;AAgBxC,IAAA,KAAK,CAAC,QAAN;AAAc;AAAA,mCAAA,EAAA,GAAG,KAAK,CAAC,QAAT,MAAiB,IAAjB;AAAA;AAAA,kCAAiB,EAAA,KAAA,KAAA,CAAjB;AAAA;AAAA,kCAAiB,EAAjB;AAAA;AAAA,kCAAqB,KAAK,QAA1B,CAAd;;AAhBwC;AAAA;;AAiBxC,IAAA,KAAK,CAAC,KAAN,GAAe,WAAD,IAA0B;AAAA;AAAA;AAAA;AAAA,kBAAK,UAAL,CAAgB,KAAK,CAAC,EAAtB,EAA2B,WAA3B;AAAuC,KAA/E;;AAjBwC;AAAA;AAmBxC;AAAC;AAAA,kCAAA,SAAS,KAAA,IAAT;AAAA;AAAA,kCAAA,SAAS,KAAA,KAAA,CAAT;AAAA;AAAA,kCAAA,SAAA;AAAA;AAAA,kCAAa,KAAK,MAAlB,CAAD,EAA2B,IAA3B,CAAgC,KAAhC;;AAnBwC;AAAA;;AAqBxC,QAAI,KAAK,CAAC,OAAN,GAAgB,CAApB,EAAuB;AAAA;AAAA;AAAA;AACrB;AACA;AACA,WAAK,MAAL,CAAY,iBAAZ,CAA8B,MAAK;AAAA;AAAA;AAAA;AACjC,QAAA,UAAU,CAAC,MAAK;AAAA;AAAA;AAAA;AACd,eAAK,MAAL,CAAY,GAAZ,CAAgB,MAAK;AAAA;AAAA;AAAA;AACnB,iBAAK,UAAL,CAAgB,KAAK,CAAC,EAAtB;AAA2B;AAAA,0CAAA,SAAS,KAAA,IAAT;AAAA;AAAA,0CAAA,SAAS,KAAA,KAAA,CAAT;AAAA;AAAA,0CAAA,SAAA;AAAA;AAAA,0CAAa,KAAK,MAAlB,CAA3B;AACD,WAFD;AAGD,SAJS,EAIP,KAAK,CAAC,OAJC,CAAV;AAKD,OAND;AAOD,KAVD;AAAA;AAAA;AAAA;AAAA;;AArBwC;AAiCxC,WAAO,KAAP;AACD;;AAEO,EAAA,UAAU,CAAC,OAAD,EAAkB,SAAlB,EAAqC;AAAA;AAAA;AACrD,UAAM,MAAM;AAAA;AAAA;AAAG;AAAA,kCAAA,SAAS,KAAA,IAAT;AAAA;AAAA,kCAAA,SAAS,KAAA,KAAA,CAAT;AAAA;AAAA,kCAAA,SAAA;AAAA;AAAA,kCAAa,KAAK,MAAlB,CAAH,CAAZ;AACA,UAAM,UAAU;AAAA;AAAA,+BAAG,MAAM,CAAC,GAAP,CAAW,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA,aAAA,KAAK,CAAC,EAAN;AAAQ,KAA5B,EAA8B,OAA9B,CAAsC,OAAtC,CAAH,CAAhB,CAFqD,CAGrD;;AAHqD;AAAA;;AAIrD,QAAI,UAAU,IAAI,CAAlB,EAAqB;AAAA;AAAA;AAAA;AACnB,MAAA,MAAM,CAAC,MAAP,CAAc,UAAd,EAA0B,CAA1B;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;AAGD;;AAtEsB,CAAzB;;;;AAAa,YAAY,GAAA,OAAA,CAAA,UAAA,CAAA,CAHxB,MAAA,CAAA,UAAA,CAAW;AACV,EAAA,UAAU,EAAE;AADF,CAAX,CAGwB,E,yCASQ,kBAAA,CAAA,Y,EAA8B,MAAA,CAAA,M,EAAkC,MAAA,CAAA,gB,EATxE,CAAA,EAAZ,YAAY,CAAZ;;;;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["import { Injectable, SecurityContext, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { TranslateService } from '@ngx-translate/core';\nimport { translationNotFoundMessage } from 'app/config/translation.config';\n\nexport type AlertType = 'success' | 'danger' | 'warning' | 'info';\n\nexport interface Alert {\n  id?: number;\n  type: AlertType;\n  message?: string;\n  translationKey?: string;\n  translationParams?: { [key: string]: unknown };\n  timeout?: number;\n  toast?: boolean;\n  position?: string;\n  close?: (alerts: Alert[]) => void;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertService {\n  timeout = 5000;\n  toast = false;\n  position = 'top right';\n\n  // unique id for each alert. Starts from 0.\n  private alertId = 0;\n  private alerts: Alert[] = [];\n\n  constructor(private sanitizer: DomSanitizer, private ngZone: NgZone, private translateService: TranslateService) {}\n\n  clear(): void {\n    this.alerts = [];\n  }\n\n  get(): Alert[] {\n    return this.alerts;\n  }\n\n  /**\n   * Adds alert to alerts array and returns added alert.\n   * @param alert      Alert to add. If `timeout`, `toast` or `position` is missing then applying default value.\n   *                   If `translateKey` is available then it's translation else `message` is used for showing.\n   * @param extAlerts  If missing then adding `alert` to `AlertService` internal array and alerts can be retrieved by `get()`.\n   *                   Else adding `alert` to `extAlerts`.\n   * @returns  Added alert\n   */\n  addAlert(alert: Alert, extAlerts?: Alert[]): Alert {\n    alert.id = this.alertId++;\n\n    if (alert.translationKey) {\n      const translatedMessage = this.translateService.instant(alert.translationKey, alert.translationParams);\n      // if translation key exists\n      if (translatedMessage !== `${translationNotFoundMessage}[${alert.translationKey}]`) {\n        alert.message = translatedMessage;\n      } else if (!alert.message) {\n        alert.message = alert.translationKey;\n      }\n    }\n\n    alert.message = this.sanitizer.sanitize(SecurityContext.HTML, alert.message ?? '') ?? '';\n    alert.timeout = alert.timeout ?? this.timeout;\n    alert.toast = alert.toast ?? this.toast;\n    alert.position = alert.position ?? this.position;\n    alert.close = (alertsArray: Alert[]) => this.closeAlert(alert.id!, alertsArray);\n\n    (extAlerts ?? this.alerts).push(alert);\n\n    if (alert.timeout > 0) {\n      // Workaround protractor waiting for setTimeout.\n      // Reference https://www.protractortest.org/#/timeouts\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.ngZone.run(() => {\n            this.closeAlert(alert.id!, extAlerts ?? this.alerts);\n          });\n        }, alert.timeout);\n      });\n    }\n\n    return alert;\n  }\n\n  private closeAlert(alertId: number, extAlerts?: Alert[]): void {\n    const alerts = extAlerts ?? this.alerts;\n    const alertIndex = alerts.map(alert => alert.id).indexOf(alertId);\n    // if found alert then remove\n    if (alertIndex >= 0) {\n      alerts.splice(alertIndex, 1);\n    }\n  }\n}\n"]}