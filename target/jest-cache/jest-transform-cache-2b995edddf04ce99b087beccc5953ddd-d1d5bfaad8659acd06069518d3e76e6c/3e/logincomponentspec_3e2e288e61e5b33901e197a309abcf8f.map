{"file":"/home/karthik/cynapseTech/src/main/webapp/app/login/login.component.spec.ts","mappings":"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","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/login/login.component.spec.ts"],"sourcesContent":["jest.mock('@angular/router');\njest.mock('app/core/auth/account.service');\njest.mock('app/login/login.service');\n\nimport { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { LoginService } from './login.service';\nimport { LoginComponent } from './login.component';\n\ndescribe('Component Tests', () => {\n  describe('LoginComponent', () => {\n    let comp: LoginComponent;\n    let fixture: ComponentFixture<LoginComponent>;\n    let mockRouter: Router;\n    let mockAccountService: AccountService;\n    let mockLoginService: LoginService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [LoginComponent],\n          providers: [\n            FormBuilder,\n            AccountService,\n            Router,\n            {\n              provide: LoginService,\n              useValue: {\n                login: jest.fn(() => of({})),\n              },\n            },\n          ],\n        })\n          .overrideTemplate(LoginComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(LoginComponent);\n      comp = fixture.componentInstance;\n      mockRouter = TestBed.inject(Router);\n      mockLoginService = TestBed.inject(LoginService);\n      mockAccountService = TestBed.inject(AccountService);\n    });\n\n    it('Should call accountService.identity on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.identity).toHaveBeenCalled();\n    });\n\n    it('Should call accountService.isAuthenticated on Init', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.isAuthenticated).toHaveBeenCalled();\n    });\n\n    it('should navigate to home page on Init if authenticated=true', () => {\n      // GIVEN\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n      mockAccountService.isAuthenticated = () => true;\n\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n    });\n\n    it('should authenticate the user and navigate to home page', inject(\n      [],\n      fakeAsync(() => {\n        // GIVEN\n        const credentials = {\n          username: 'admin',\n          password: 'admin',\n          rememberMe: true,\n        };\n\n        comp.loginForm.patchValue({\n          username: 'admin',\n          password: 'admin',\n          rememberMe: true,\n        });\n\n        // WHEN/\n        comp.login();\n        tick(); // simulate async\n\n        // THEN\n        expect(comp.authenticationError).toEqual(false);\n        expect(mockLoginService.login).toHaveBeenCalledWith(credentials);\n        expect(mockRouter.navigate).toHaveBeenCalledWith(['']);\n      })\n    ));\n  });\n});\n"],"version":3}