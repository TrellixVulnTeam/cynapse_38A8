{"file":"/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/service/forms.service.spec.ts","mappings":"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","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/service/forms.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport * as dayjs from 'dayjs';\n\nimport { DATE_FORMAT } from 'app/config/input.constants';\nimport { IForms, Forms } from '../forms.model';\n\nimport { FormsService } from './forms.service';\n\ndescribe('Service Tests', () => {\n  describe('Forms Service', () => {\n    let service: FormsService;\n    let httpMock: HttpTestingController;\n    let elemDefault: IForms;\n    let expectedResult: IForms | IForms[] | boolean | null;\n    let currentDate: dayjs.Dayjs;\n\n    beforeEach(() => {\n      TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n      });\n      expectedResult = null;\n      service = TestBed.inject(FormsService);\n      httpMock = TestBed.inject(HttpTestingController);\n      currentDate = dayjs();\n\n      elemDefault = {\n        id: 0,\n        name: 'AAAAAAA',\n        cynapseId: 'AAAAAAA',\n        emailId: 'AAAAAAA',\n        phoneNumber: 'AAAAAAA',\n        createdDate: currentDate,\n        referalCode: 'AAAAAAA',\n        formDocumentContentType: 'image/png',\n        formDocument: 'AAAAAAA',\n      };\n    });\n\n    describe('Service methods', () => {\n      it('should find an element', () => {\n        const returnedFromService = Object.assign(\n          {\n            createdDate: currentDate.format(DATE_FORMAT),\n          },\n          elemDefault\n        );\n\n        service.find(123).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(elemDefault);\n      });\n\n      it('should create a Forms', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 0,\n            createdDate: currentDate.format(DATE_FORMAT),\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.create(new Forms()).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'POST' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should update a Forms', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            name: 'BBBBBB',\n            cynapseId: 'BBBBBB',\n            emailId: 'BBBBBB',\n            phoneNumber: 'BBBBBB',\n            createdDate: currentDate.format(DATE_FORMAT),\n            referalCode: 'BBBBBB',\n            formDocument: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.update(expected).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PUT' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should partial update a Forms', () => {\n        const patchObject = Object.assign(\n          {\n            name: 'BBBBBB',\n            cynapseId: 'BBBBBB',\n            emailId: 'BBBBBB',\n            phoneNumber: 'BBBBBB',\n            createdDate: currentDate.format(DATE_FORMAT),\n          },\n          new Forms()\n        );\n\n        const returnedFromService = Object.assign(patchObject, elemDefault);\n\n        const expected = Object.assign(\n          {\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'PATCH' });\n        req.flush(returnedFromService);\n        expect(expectedResult).toMatchObject(expected);\n      });\n\n      it('should return a list of Forms', () => {\n        const returnedFromService = Object.assign(\n          {\n            id: 1,\n            name: 'BBBBBB',\n            cynapseId: 'BBBBBB',\n            emailId: 'BBBBBB',\n            phoneNumber: 'BBBBBB',\n            createdDate: currentDate.format(DATE_FORMAT),\n            referalCode: 'BBBBBB',\n            formDocument: 'BBBBBB',\n          },\n          elemDefault\n        );\n\n        const expected = Object.assign(\n          {\n            createdDate: currentDate,\n          },\n          returnedFromService\n        );\n\n        service.query().subscribe(resp => (expectedResult = resp.body));\n\n        const req = httpMock.expectOne({ method: 'GET' });\n        req.flush([returnedFromService]);\n        httpMock.verify();\n        expect(expectedResult).toContainEqual(expected);\n      });\n\n      it('should delete a Forms', () => {\n        service.delete(123).subscribe(resp => (expectedResult = resp.ok));\n\n        const req = httpMock.expectOne({ method: 'DELETE' });\n        req.flush({ status: 200 });\n        expect(expectedResult);\n      });\n\n      describe('addFormsToCollectionIfMissing', () => {\n        it('should add a Forms to an empty array', () => {\n          const forms: IForms = { id: 123 };\n          expectedResult = service.addFormsToCollectionIfMissing([], forms);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(forms);\n        });\n\n        it('should not add a Forms to an array that contains it', () => {\n          const forms: IForms = { id: 123 };\n          const formsCollection: IForms[] = [\n            {\n              ...forms,\n            },\n            { id: 456 },\n          ];\n          expectedResult = service.addFormsToCollectionIfMissing(formsCollection, forms);\n          expect(expectedResult).toHaveLength(2);\n        });\n\n        it(\"should add a Forms to an array that doesn't contain it\", () => {\n          const forms: IForms = { id: 123 };\n          const formsCollection: IForms[] = [{ id: 456 }];\n          expectedResult = service.addFormsToCollectionIfMissing(formsCollection, forms);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(forms);\n        });\n\n        it('should add only unique Forms to an array', () => {\n          const formsArray: IForms[] = [{ id: 123 }, { id: 456 }, { id: 5237 }];\n          const formsCollection: IForms[] = [{ id: 123 }];\n          expectedResult = service.addFormsToCollectionIfMissing(formsCollection, ...formsArray);\n          expect(expectedResult).toHaveLength(3);\n        });\n\n        it('should accept varargs', () => {\n          const forms: IForms = { id: 123 };\n          const forms2: IForms = { id: 456 };\n          expectedResult = service.addFormsToCollectionIfMissing([], forms, forms2);\n          expect(expectedResult).toHaveLength(2);\n          expect(expectedResult).toContain(forms);\n          expect(expectedResult).toContain(forms2);\n        });\n\n        it('should accept null and undefined values', () => {\n          const forms: IForms = { id: 123 };\n          expectedResult = service.addFormsToCollectionIfMissing([], null, forms, undefined);\n          expect(expectedResult).toHaveLength(1);\n          expect(expectedResult).toContain(forms);\n        });\n      });\n    });\n\n    afterEach(() => {\n      httpMock.verify();\n    });\n  });\n});\n"],"version":3}