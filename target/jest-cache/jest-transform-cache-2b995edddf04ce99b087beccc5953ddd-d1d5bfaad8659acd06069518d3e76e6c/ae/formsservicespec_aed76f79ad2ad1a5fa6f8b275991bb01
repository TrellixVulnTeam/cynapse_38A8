62a055ac74177159aa4d35702734549e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const dayjs = require("dayjs");
const input_constants_1 = require("app/config/input.constants");
const forms_model_1 = require("../forms.model");
const forms_service_1 = require("./forms.service");
describe('Service Tests', () => {
    describe('Forms Service', () => {
        let service;
        let httpMock;
        let elemDefault;
        let expectedResult;
        let currentDate;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule],
            });
            expectedResult = null;
            service = testing_1.TestBed.inject(forms_service_1.FormsService);
            httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
            currentDate = dayjs();
            elemDefault = {
                id: 0,
                name: 'AAAAAAA',
                cynapseId: 'AAAAAAA',
                emailId: 'AAAAAAA',
                phoneNumber: 'AAAAAAA',
                createdDate: currentDate,
                referalCode: 'AAAAAAA',
                formDocumentContentType: 'image/png',
                formDocument: 'AAAAAAA',
            };
        });
        describe('Service methods', () => {
            it('should find an element', () => {
                const returnedFromService = Object.assign({
                    createdDate: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                service.find(123).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(elemDefault);
            });
            it('should create a Forms', () => {
                const returnedFromService = Object.assign({
                    id: 0,
                    createdDate: currentDate.format(input_constants_1.DATE_FORMAT),
                }, elemDefault);
                const expected = Object.assign({
                    createdDate: currentDate,
                }, returnedFromService);
                service.create(new forms_model_1.Forms()).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should update a Forms', () => {
                const returnedFromService = Object.assign({
                    id: 1,
                    name: 'BBBBBB',
                    cynapseId: 'BBBBBB',
                    emailId: 'BBBBBB',
                    phoneNumber: 'BBBBBB',
                    createdDate: currentDate.format(input_constants_1.DATE_FORMAT),
                    referalCode: 'BBBBBB',
                    formDocument: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    createdDate: currentDate,
                }, returnedFromService);
                service.update(expected).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should partial update a Forms', () => {
                const patchObject = Object.assign({
                    name: 'BBBBBB',
                    cynapseId: 'BBBBBB',
                    emailId: 'BBBBBB',
                    phoneNumber: 'BBBBBB',
                    createdDate: currentDate.format(input_constants_1.DATE_FORMAT),
                }, new forms_model_1.Forms());
                const returnedFromService = Object.assign(patchObject, elemDefault);
                const expected = Object.assign({
                    createdDate: currentDate,
                }, returnedFromService);
                service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'PATCH' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject(expected);
            });
            it('should return a list of Forms', () => {
                const returnedFromService = Object.assign({
                    id: 1,
                    name: 'BBBBBB',
                    cynapseId: 'BBBBBB',
                    emailId: 'BBBBBB',
                    phoneNumber: 'BBBBBB',
                    createdDate: currentDate.format(input_constants_1.DATE_FORMAT),
                    referalCode: 'BBBBBB',
                    formDocument: 'BBBBBB',
                }, elemDefault);
                const expected = Object.assign({
                    createdDate: currentDate,
                }, returnedFromService);
                service.query().subscribe(resp => (expectedResult = resp.body));
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });
            it('should delete a Forms', () => {
                service.delete(123).subscribe(resp => (expectedResult = resp.ok));
                const req = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
            describe('addFormsToCollectionIfMissing', () => {
                it('should add a Forms to an empty array', () => {
                    const forms = { id: 123 };
                    expectedResult = service.addFormsToCollectionIfMissing([], forms);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(forms);
                });
                it('should not add a Forms to an array that contains it', () => {
                    const forms = { id: 123 };
                    const formsCollection = [
                        Object.assign({}, forms),
                        { id: 456 },
                    ];
                    expectedResult = service.addFormsToCollectionIfMissing(formsCollection, forms);
                    expect(expectedResult).toHaveLength(2);
                });
                it("should add a Forms to an array that doesn't contain it", () => {
                    const forms = { id: 123 };
                    const formsCollection = [{ id: 456 }];
                    expectedResult = service.addFormsToCollectionIfMissing(formsCollection, forms);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(forms);
                });
                it('should add only unique Forms to an array', () => {
                    const formsArray = [{ id: 123 }, { id: 456 }, { id: 5237 }];
                    const formsCollection = [{ id: 123 }];
                    expectedResult = service.addFormsToCollectionIfMissing(formsCollection, ...formsArray);
                    expect(expectedResult).toHaveLength(3);
                });
                it('should accept varargs', () => {
                    const forms = { id: 123 };
                    const forms2 = { id: 456 };
                    expectedResult = service.addFormsToCollectionIfMissing([], forms, forms2);
                    expect(expectedResult).toHaveLength(2);
                    expect(expectedResult).toContain(forms);
                    expect(expectedResult).toContain(forms2);
                });
                it('should accept null and undefined values', () => {
                    const forms = { id: 123 };
                    expectedResult = service.addFormsToCollectionIfMissing([], null, forms, undefined);
                    expect(expectedResult).toHaveLength(1);
                    expect(expectedResult).toContain(forms);
                });
            });
        });
        afterEach(() => {
            httpMock.verify();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,