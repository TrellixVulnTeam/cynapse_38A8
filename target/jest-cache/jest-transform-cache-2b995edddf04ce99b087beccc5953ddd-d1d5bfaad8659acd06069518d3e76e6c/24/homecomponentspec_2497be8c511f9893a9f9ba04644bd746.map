{"file":"/home/karthik/cynapseTech/src/main/webapp/app/home/home.component.spec.ts","mappings":";;AAAA,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AAC3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAE7B,mDAAgF;AAChF,4CAAyC;AACzC,+BAA0B;AAE1B,mEAA+D;AAE/D,qDAAiD;AAEjD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAI,IAAmB,CAAC;QACxB,IAAI,OAAwC,CAAC;QAC7C,IAAI,kBAAkC,CAAC;QACvC,IAAI,UAAkB,CAAC;QAEvB,UAAU,CACR,sBAAY,CAAC,GAAG,EAAE;YAChB,iBAAO,CAAC,sBAAsB,CAAC;gBAC7B,YAAY,EAAE,CAAC,8BAAa,CAAC;gBAC7B,SAAS,EAAE,CAAC,gCAAc,EAAE,eAAM,CAAC;aACpC,CAAC;iBACC,gBAAgB,CAAC,8BAAa,EAAE,EAAE,CAAC;iBACnC,iBAAiB,EAAE,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;QAEF,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,8BAAa,CAAC,CAAC;YACjD,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACjC,kBAAkB,GAAG,iBAAO,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC;YACpD,kBAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,SAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACtD,kBAAkB,CAAC,sBAAsB,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,SAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACpE,UAAU,GAAG,iBAAO,CAAC,MAAM,CAAC,eAAM,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,OAAO;YACP,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,OAAO;YACP,MAAM,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;YAClF,OAAO;YACP,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,OAAO;YACP,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,OAAO;YACP,IAAI,CAAC,KAAK,EAAE,CAAC;YAEb,OAAO;YACP,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/home/home.component.spec.ts"],"sourcesContent":["jest.mock('app/core/auth/account.service');\njest.mock('@angular/router');\n\nimport { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\nimport { HomeComponent } from './home.component';\n\ndescribe('Component Tests', () => {\n  describe('Home Component', () => {\n    let comp: HomeComponent;\n    let fixture: ComponentFixture<HomeComponent>;\n    let mockAccountService: AccountService;\n    let mockRouter: Router;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          declarations: [HomeComponent],\n          providers: [AccountService, Router],\n        })\n          .overrideTemplate(HomeComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(HomeComponent);\n      comp = fixture.componentInstance;\n      mockAccountService = TestBed.inject(AccountService);\n      mockAccountService.identity = jest.fn(() => of(null));\n      mockAccountService.getAuthenticationState = jest.fn(() => of(null));\n      mockRouter = TestBed.inject(Router);\n    });\n\n    it('Should call accountService.getAuthenticationState on init', () => {\n      // WHEN\n      comp.ngOnInit();\n\n      // THEN\n      expect(mockAccountService.getAuthenticationState).toHaveBeenCalled();\n    });\n\n    it('Should call accountService.isAuthenticated when it checks authentication', () => {\n      // WHEN\n      comp.isAuthenticated();\n\n      // THEN\n      expect(mockAccountService.isAuthenticated).toHaveBeenCalled();\n    });\n\n    it('Should navigate to /login on login', () => {\n      // WHEN\n      comp.login();\n\n      // THEN\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['/login']);\n    });\n  });\n});\n"],"version":3}