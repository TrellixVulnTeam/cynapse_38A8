{"version":3,"sources":["/home/karthik/cynapseTech/src/main/webapp/app/entities/forms/service/forms.service.ts"],"names":[],"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { DATE_FORMAT } from 'app/config/input.constants';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IForms, getFormsIdentifier } from '../forms.model';\n\nexport type EntityResponseType = HttpResponse<IForms>;\nexport type EntityArrayResponseType = HttpResponse<IForms[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class FormsService {\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/forms');\n\n  constructor(protected http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  create(forms: IForms): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(forms);\n    return this.http\n      .post<IForms>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(forms: IForms): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(forms);\n    return this.http\n      .put<IForms>(`${this.resourceUrl}/${getFormsIdentifier(forms) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(forms: IForms): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(forms);\n    return this.http\n      .patch<IForms>(`${this.resourceUrl}/${getFormsIdentifier(forms) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IForms>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IForms[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addFormsToCollectionIfMissing(formsCollection: IForms[], ...formsToCheck: (IForms | null | undefined)[]): IForms[] {\n    const forms: IForms[] = formsToCheck.filter(isPresent);\n    if (forms.length > 0) {\n      const formsCollectionIdentifiers = formsCollection.map(formsItem => getFormsIdentifier(formsItem)!);\n      const formsToAdd = forms.filter(formsItem => {\n        const formsIdentifier = getFormsIdentifier(formsItem);\n        if (formsIdentifier == null || formsCollectionIdentifiers.includes(formsIdentifier)) {\n          return false;\n        }\n        formsCollectionIdentifiers.push(formsIdentifier);\n        return true;\n      });\n      return [...formsToAdd, ...formsCollection];\n    }\n    return formsCollection;\n  }\n\n  protected convertDateFromClient(forms: IForms): IForms {\n    return Object.assign({}, forms, {\n      createdDate: forms.createdDate?.isValid() ? forms.createdDate.format(DATE_FORMAT) : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.createdDate = res.body.createdDate ? dayjs(res.body.createdDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((forms: IForms) => {\n        forms.createdDate = forms.createdDate ? dayjs(forms.createdDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]}