{"file":"/home/karthik/cynapseTech/src/main/webapp/app/admin/user-management/update/user-management-update.component.spec.ts","mappings":"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","names":[],"sources":["/home/karthik/cynapseTech/src/main/webapp/app/admin/user-management/update/user-management-update.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync, inject, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { HttpResponse } from '@angular/common/http';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\nimport { Authority } from 'app/config/authority.constants';\nimport { UserManagementService } from '../service/user-management.service';\nimport { User } from '../user-management.model';\n\nimport { UserManagementUpdateComponent } from './user-management-update.component';\n\ndescribe('Component Tests', () => {\n  describe('User Management Update Component', () => {\n    let comp: UserManagementUpdateComponent;\n    let fixture: ComponentFixture<UserManagementUpdateComponent>;\n    let service: UserManagementService;\n\n    beforeEach(\n      waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          declarations: [UserManagementUpdateComponent],\n          providers: [\n            FormBuilder,\n            {\n              provide: ActivatedRoute,\n              useValue: {\n                data: of({ user: new User(123, 'user', 'first', 'last', 'first@last.com', true, 'en', [Authority.USER], 'admin') }),\n              },\n            },\n          ],\n        })\n          .overrideTemplate(UserManagementUpdateComponent, '')\n          .compileComponents();\n      })\n    );\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(UserManagementUpdateComponent);\n      comp = fixture.componentInstance;\n      service = TestBed.inject(UserManagementService);\n    });\n\n    describe('OnInit', () => {\n      it('Should load authorities and language on init', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          spyOn(service, 'authorities').and.returnValue(of(['USER']));\n\n          // WHEN\n          comp.ngOnInit();\n\n          // THEN\n          expect(service.authorities).toHaveBeenCalled();\n          expect(comp.authorities).toEqual(['USER']);\n        })\n      ));\n    });\n\n    describe('save', () => {\n      it('Should call update service on save for existing user', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const entity = new User(123);\n          spyOn(service, 'update').and.returnValue(\n            of(\n              new HttpResponse({\n                body: entity,\n              })\n            )\n          );\n          comp.user = entity;\n          comp.editForm.patchValue({ id: entity.id });\n          // WHEN\n          comp.save();\n          tick(); // simulate async\n\n          // THEN\n          expect(service.update).toHaveBeenCalledWith(entity);\n          expect(comp.isSaving).toEqual(false);\n        })\n      ));\n\n      it('Should call create service on save for new user', inject(\n        [],\n        fakeAsync(() => {\n          // GIVEN\n          const entity = new User();\n          spyOn(service, 'create').and.returnValue(of(new HttpResponse({ body: entity })));\n          comp.user = entity;\n          // WHEN\n          comp.save();\n          tick(); // simulate async\n\n          // THEN\n          expect(service.create).toHaveBeenCalledWith(entity);\n          expect(comp.isSaving).toEqual(false);\n        })\n      ));\n    });\n  });\n});\n"],"version":3}